use {Term, Type};
extern crate lalrpop_util as __lalrpop_util;

mod __parse__Term {
    #![allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports)]

    use {Term, Type};
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(dead_code)]
    pub enum __Symbol<'input> {
        Term_22_28_22(&'input str),
        Term_22_29_22(&'input str),
        Term_22_2b_22(&'input str),
        Term_22_2c_22(&'input str),
        Term_22_2e_22(&'input str),
        Term_22_3a_22(&'input str),
        Term_22_3b_22(&'input str),
        Term_22Bool_22(&'input str),
        Term_22Unit_22(&'input str),
        Term_22as_22(&'input str),
        Term_22case_22(&'input str),
        Term_22else_22(&'input str),
        Term_22false_22(&'input str),
        Term_22if_22(&'input str),
        Term_22inl_22(&'input str),
        Term_22inr_22(&'input str),
        Term_22of_22(&'input str),
        Term_22then_22(&'input str),
        Term_22true_22(&'input str),
        Term_22unit_22(&'input str),
        Term_22_7b_22(&'input str),
        Term_22_7c_22(&'input str),
        Term_22_7d_22(&'input str),
        Termr_23_22_5b0_2d9_5d_2b_22_23(&'input str),
        TermFatArrow(&'input str),
        TermLambda(&'input str),
        TermName(&'input str),
        TermThinArrow(&'input str),
        TermTimes(&'input str),
        Nt_28_3cTerminal_3e_20_22_2c_22_29(Term),
        Nt_28_3cTerminal_3e_20_22_2c_22_29_2b(::std::vec::Vec<Term>),
        Nt_28_3cType_3e_20_22_2c_22_29(Type),
        Nt_28_3cType_3e_20_22_2c_22_29_2b(::std::vec::Vec<Type>),
        NtAbstraction(Term),
        NtApplication(Term),
        NtArrowType(Type),
        NtAscription(Term),
        NtCondition(Term),
        NtIndex(usize),
        NtProductType(Type),
        NtTerm(Term),
        NtTerminal(Term),
        NtTerminalType(Type),
        NtType(Type),
        NtVariable(String),
        Nt____Term(Term),
        Nt____Type(Type),
    }
    const __ACTION: &'static [i32] = &[// State 0
                                       9,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       10,
                                       0,
                                       11,
                                       12,
                                       13,
                                       14,
                                       0,
                                       0,
                                       15,
                                       16,
                                       17,
                                       0,
                                       0,
                                       18,
                                       0,
                                       19,
                                       0,
                                       0,
                                       0,
                                       // State 1
                                       -10,
                                       -10,
                                       -10,
                                       -10,
                                       -10,
                                       -10,
                                       -10,
                                       -10,
                                       -10,
                                       -10,
                                       -10,
                                       -10,
                                       -10,
                                       -10,
                                       -10,
                                       -10,
                                       -10,
                                       -10,
                                       -10,
                                       -10,
                                       -10,
                                       -10,
                                       -10,
                                       -10,
                                       -10,
                                       -10,
                                       -10,
                                       -10,
                                       -10,
                                       // State 2
                                       9,
                                       -22,
                                       0,
                                       0,
                                       0,
                                       0,
                                       21,
                                       0,
                                       0,
                                       0,
                                       10,
                                       0,
                                       11,
                                       12,
                                       13,
                                       14,
                                       0,
                                       0,
                                       15,
                                       16,
                                       17,
                                       0,
                                       0,
                                       18,
                                       0,
                                       19,
                                       0,
                                       0,
                                       0,
                                       // State 3
                                       -17,
                                       -17,
                                       0,
                                       0,
                                       0,
                                       0,
                                       -17,
                                       0,
                                       0,
                                       22,
                                       -17,
                                       -17,
                                       -17,
                                       -17,
                                       -17,
                                       -17,
                                       -17,
                                       -17,
                                       -17,
                                       -17,
                                       -17,
                                       -17,
                                       0,
                                       -17,
                                       0,
                                       -17,
                                       0,
                                       0,
                                       0,
                                       // State 4
                                       -8,
                                       -8,
                                       -8,
                                       -8,
                                       -8,
                                       -8,
                                       -8,
                                       -8,
                                       -8,
                                       -8,
                                       -8,
                                       -8,
                                       -8,
                                       -8,
                                       -8,
                                       -8,
                                       -8,
                                       -8,
                                       -8,
                                       -8,
                                       -8,
                                       -8,
                                       -8,
                                       -8,
                                       -8,
                                       -8,
                                       -8,
                                       -8,
                                       -8,
                                       // State 5
                                       -31,
                                       -31,
                                       -31,
                                       -31,
                                       -31,
                                       -31,
                                       -31,
                                       -31,
                                       -31,
                                       -31,
                                       -31,
                                       -31,
                                       -31,
                                       -31,
                                       -31,
                                       -31,
                                       -31,
                                       -31,
                                       -31,
                                       -31,
                                       -31,
                                       -31,
                                       -31,
                                       -31,
                                       -31,
                                       -31,
                                       -31,
                                       -31,
                                       -31,
                                       // State 6
                                       -40,
                                       -40,
                                       -40,
                                       -40,
                                       -40,
                                       -40,
                                       -40,
                                       -40,
                                       -40,
                                       -40,
                                       -40,
                                       -40,
                                       -40,
                                       -40,
                                       -40,
                                       -40,
                                       -40,
                                       -40,
                                       -40,
                                       -40,
                                       -40,
                                       -40,
                                       -40,
                                       -40,
                                       -40,
                                       -40,
                                       -40,
                                       -40,
                                       -40,
                                       // State 7
                                       -14,
                                       -14,
                                       0,
                                       0,
                                       23,
                                       0,
                                       -14,
                                       0,
                                       0,
                                       -14,
                                       -14,
                                       -14,
                                       -14,
                                       -14,
                                       -14,
                                       -14,
                                       -14,
                                       -14,
                                       -14,
                                       -14,
                                       -14,
                                       -14,
                                       0,
                                       -14,
                                       0,
                                       -14,
                                       0,
                                       0,
                                       0,
                                       // State 8
                                       9,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       10,
                                       0,
                                       11,
                                       12,
                                       13,
                                       14,
                                       0,
                                       0,
                                       15,
                                       16,
                                       17,
                                       0,
                                       0,
                                       18,
                                       0,
                                       19,
                                       0,
                                       0,
                                       0,
                                       // State 9
                                       9,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       10,
                                       0,
                                       11,
                                       12,
                                       13,
                                       14,
                                       0,
                                       0,
                                       15,
                                       16,
                                       17,
                                       0,
                                       0,
                                       18,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       // State 10
                                       -29,
                                       -29,
                                       -29,
                                       -29,
                                       -29,
                                       -29,
                                       -29,
                                       -29,
                                       -29,
                                       -29,
                                       -29,
                                       -29,
                                       -29,
                                       -29,
                                       -29,
                                       -29,
                                       -29,
                                       -29,
                                       -29,
                                       -29,
                                       -29,
                                       -29,
                                       -29,
                                       -29,
                                       -29,
                                       -29,
                                       -29,
                                       -29,
                                       -29,
                                       // State 11
                                       9,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       10,
                                       0,
                                       11,
                                       12,
                                       13,
                                       14,
                                       0,
                                       0,
                                       15,
                                       16,
                                       17,
                                       0,
                                       0,
                                       18,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       // State 12
                                       9,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       11,
                                       0,
                                       13,
                                       14,
                                       0,
                                       0,
                                       15,
                                       16,
                                       17,
                                       0,
                                       0,
                                       18,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       // State 13
                                       9,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       11,
                                       0,
                                       13,
                                       14,
                                       0,
                                       0,
                                       15,
                                       16,
                                       17,
                                       0,
                                       0,
                                       18,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       // State 14
                                       -28,
                                       -28,
                                       -28,
                                       -28,
                                       -28,
                                       -28,
                                       -28,
                                       -28,
                                       -28,
                                       -28,
                                       -28,
                                       -28,
                                       -28,
                                       -28,
                                       -28,
                                       -28,
                                       -28,
                                       -28,
                                       -28,
                                       -28,
                                       -28,
                                       -28,
                                       -28,
                                       -28,
                                       -28,
                                       -28,
                                       -28,
                                       -28,
                                       -28,
                                       // State 15
                                       -30,
                                       -30,
                                       -30,
                                       -30,
                                       -30,
                                       -30,
                                       -30,
                                       -30,
                                       -30,
                                       -30,
                                       -30,
                                       -30,
                                       -30,
                                       -30,
                                       -30,
                                       -30,
                                       -30,
                                       -30,
                                       -30,
                                       -30,
                                       -30,
                                       -30,
                                       -30,
                                       -30,
                                       -30,
                                       -30,
                                       -30,
                                       -30,
                                       -30,
                                       // State 16
                                       9,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       11,
                                       0,
                                       13,
                                       14,
                                       0,
                                       0,
                                       15,
                                       16,
                                       17,
                                       0,
                                       0,
                                       18,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       // State 17
                                       -18,
                                       -18,
                                       -18,
                                       -18,
                                       -18,
                                       -18,
                                       -18,
                                       -18,
                                       -18,
                                       -18,
                                       -18,
                                       -18,
                                       -18,
                                       -18,
                                       -18,
                                       -18,
                                       -18,
                                       -18,
                                       -18,
                                       -18,
                                       -18,
                                       -18,
                                       -18,
                                       -18,
                                       -18,
                                       -18,
                                       -18,
                                       -18,
                                       -18,
                                       // State 18
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       31,
                                       0,
                                       0,
                                       // State 19
                                       -9,
                                       -9,
                                       -9,
                                       -9,
                                       -9,
                                       -9,
                                       -9,
                                       -9,
                                       -9,
                                       -9,
                                       -9,
                                       -9,
                                       -9,
                                       -9,
                                       -9,
                                       -9,
                                       -9,
                                       -9,
                                       -9,
                                       -9,
                                       -9,
                                       -9,
                                       -9,
                                       -9,
                                       -9,
                                       -9,
                                       -9,
                                       -9,
                                       -9,
                                       // State 20
                                       9,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       10,
                                       0,
                                       11,
                                       12,
                                       13,
                                       14,
                                       0,
                                       0,
                                       15,
                                       16,
                                       17,
                                       0,
                                       0,
                                       18,
                                       0,
                                       19,
                                       0,
                                       0,
                                       0,
                                       // State 21
                                       37,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       38,
                                       39,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       40,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       // State 22
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       18,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       // State 23
                                       0,
                                       42,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       // State 24
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       43,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       // State 25
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       44,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       // State 26
                                       0,
                                       0,
                                       0,
                                       0,
                                       23,
                                       0,
                                       0,
                                       0,
                                       0,
                                       45,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       // State 27
                                       0,
                                       0,
                                       0,
                                       0,
                                       23,
                                       0,
                                       0,
                                       0,
                                       0,
                                       46,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       // State 28
                                       0,
                                       0,
                                       0,
                                       47,
                                       23,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       // State 29
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       48,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       // State 30
                                       -39,
                                       -39,
                                       -39,
                                       -39,
                                       -39,
                                       -39,
                                       -39,
                                       -39,
                                       -39,
                                       -39,
                                       -39,
                                       -39,
                                       -39,
                                       -39,
                                       -39,
                                       -39,
                                       -39,
                                       -39,
                                       -39,
                                       -39,
                                       -39,
                                       -39,
                                       -39,
                                       -39,
                                       -39,
                                       -39,
                                       -39,
                                       -39,
                                       -39,
                                       // State 31
                                       -21,
                                       -21,
                                       -21,
                                       -21,
                                       -21,
                                       -21,
                                       -21,
                                       -21,
                                       -21,
                                       -21,
                                       -21,
                                       -21,
                                       -21,
                                       -21,
                                       -21,
                                       -21,
                                       -21,
                                       -21,
                                       -21,
                                       -21,
                                       -21,
                                       -21,
                                       -21,
                                       -21,
                                       -21,
                                       -21,
                                       -21,
                                       -21,
                                       -21,
                                       // State 32
                                       -20,
                                       -20,
                                       -20,
                                       -20,
                                       -20,
                                       0,
                                       -20,
                                       0,
                                       0,
                                       -20,
                                       -20,
                                       -20,
                                       -20,
                                       -20,
                                       -20,
                                       -20,
                                       -20,
                                       -20,
                                       -20,
                                       -20,
                                       -20,
                                       -20,
                                       -20,
                                       -20,
                                       0,
                                       -20,
                                       0,
                                       0,
                                       49,
                                       // State 33
                                       -38,
                                       -38,
                                       50,
                                       -38,
                                       -38,
                                       0,
                                       -38,
                                       0,
                                       0,
                                       -38,
                                       -38,
                                       -38,
                                       -38,
                                       -38,
                                       -38,
                                       -38,
                                       -38,
                                       -38,
                                       -38,
                                       -38,
                                       -38,
                                       -38,
                                       -38,
                                       -38,
                                       0,
                                       -38,
                                       0,
                                       0,
                                       0,
                                       // State 34
                                       -12,
                                       -12,
                                       -12,
                                       -12,
                                       -12,
                                       0,
                                       -12,
                                       0,
                                       0,
                                       -12,
                                       -12,
                                       -12,
                                       -12,
                                       -12,
                                       -12,
                                       -12,
                                       -12,
                                       -12,
                                       -12,
                                       -12,
                                       -12,
                                       -12,
                                       -12,
                                       -12,
                                       0,
                                       -12,
                                       0,
                                       51,
                                       -12,
                                       // State 35
                                       -13,
                                       -13,
                                       -13,
                                       -13,
                                       -13,
                                       -13,
                                       -13,
                                       -13,
                                       -13,
                                       -13,
                                       -13,
                                       -13,
                                       -13,
                                       -13,
                                       -13,
                                       -13,
                                       -13,
                                       -13,
                                       -13,
                                       -13,
                                       -13,
                                       -13,
                                       -13,
                                       -13,
                                       -13,
                                       -13,
                                       -13,
                                       -13,
                                       -13,
                                       // State 36
                                       37,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       38,
                                       39,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       40,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       // State 37
                                       -34,
                                       -34,
                                       -34,
                                       -34,
                                       -34,
                                       -34,
                                       -34,
                                       -34,
                                       -34,
                                       -34,
                                       -34,
                                       -34,
                                       -34,
                                       -34,
                                       -34,
                                       -34,
                                       -34,
                                       -34,
                                       -34,
                                       -34,
                                       -34,
                                       -34,
                                       -34,
                                       -34,
                                       -34,
                                       -34,
                                       -34,
                                       -34,
                                       -34,
                                       // State 38
                                       -35,
                                       -35,
                                       -35,
                                       -35,
                                       -35,
                                       -35,
                                       -35,
                                       -35,
                                       -35,
                                       -35,
                                       -35,
                                       -35,
                                       -35,
                                       -35,
                                       -35,
                                       -35,
                                       -35,
                                       -35,
                                       -35,
                                       -35,
                                       -35,
                                       -35,
                                       -35,
                                       -35,
                                       -35,
                                       -35,
                                       -35,
                                       -35,
                                       -35,
                                       // State 39
                                       37,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       38,
                                       39,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       40,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       // State 40
                                       -25,
                                       -25,
                                       -25,
                                       -25,
                                       -25,
                                       -25,
                                       -25,
                                       -25,
                                       -25,
                                       -25,
                                       -25,
                                       -25,
                                       -25,
                                       -25,
                                       -25,
                                       -25,
                                       -25,
                                       -25,
                                       -25,
                                       -25,
                                       -25,
                                       -25,
                                       -25,
                                       -25,
                                       -25,
                                       -25,
                                       -25,
                                       -25,
                                       -25,
                                       // State 41
                                       -32,
                                       -32,
                                       -32,
                                       -32,
                                       -32,
                                       -32,
                                       -32,
                                       -32,
                                       -32,
                                       -32,
                                       -32,
                                       -32,
                                       -32,
                                       -32,
                                       -32,
                                       -32,
                                       -32,
                                       -32,
                                       -32,
                                       -32,
                                       -32,
                                       -32,
                                       -32,
                                       -32,
                                       -32,
                                       -32,
                                       -32,
                                       -32,
                                       -32,
                                       // State 42
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       55,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       // State 43
                                       9,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       10,
                                       0,
                                       11,
                                       12,
                                       13,
                                       14,
                                       0,
                                       0,
                                       15,
                                       16,
                                       17,
                                       0,
                                       0,
                                       18,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       // State 44
                                       37,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       38,
                                       39,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       40,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       // State 45
                                       37,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       38,
                                       39,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       40,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       // State 46
                                       9,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       11,
                                       0,
                                       13,
                                       14,
                                       0,
                                       0,
                                       15,
                                       16,
                                       17,
                                       0,
                                       0,
                                       18,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       // State 47
                                       37,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       38,
                                       39,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       40,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       // State 48
                                       37,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       38,
                                       39,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       40,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       // State 49
                                       37,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       38,
                                       39,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       40,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       // State 50
                                       37,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       38,
                                       39,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       40,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       // State 51
                                       0,
                                       65,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       // State 52
                                       37,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       38,
                                       39,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       40,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       // State 53
                                       0,
                                       0,
                                       0,
                                       67,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       // State 54
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       31,
                                       0,
                                       0,
                                       // State 55
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       69,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       // State 56
                                       -26,
                                       -26,
                                       -26,
                                       -26,
                                       -26,
                                       -26,
                                       -26,
                                       -26,
                                       -26,
                                       -26,
                                       -26,
                                       -26,
                                       -26,
                                       -26,
                                       -26,
                                       -26,
                                       -26,
                                       -26,
                                       -26,
                                       -26,
                                       -26,
                                       -26,
                                       -26,
                                       -26,
                                       -26,
                                       -26,
                                       -26,
                                       -26,
                                       -26,
                                       // State 57
                                       -27,
                                       -27,
                                       -27,
                                       -27,
                                       -27,
                                       -27,
                                       -27,
                                       -27,
                                       -27,
                                       -27,
                                       -27,
                                       -27,
                                       -27,
                                       -27,
                                       -27,
                                       -27,
                                       -27,
                                       -27,
                                       -27,
                                       -27,
                                       -27,
                                       -27,
                                       -27,
                                       -27,
                                       -27,
                                       -27,
                                       -27,
                                       -27,
                                       -27,
                                       // State 58
                                       9,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       11,
                                       0,
                                       13,
                                       14,
                                       0,
                                       0,
                                       15,
                                       16,
                                       17,
                                       0,
                                       0,
                                       18,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       // State 59
                                       0,
                                       0,
                                       0,
                                       71,
                                       23,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       72,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       // State 60
                                       0,
                                       0,
                                       0,
                                       0,
                                       73,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       // State 61
                                       -19,
                                       -19,
                                       -19,
                                       -19,
                                       -19,
                                       -19,
                                       -19,
                                       -19,
                                       -19,
                                       -19,
                                       -19,
                                       -19,
                                       -19,
                                       -19,
                                       -19,
                                       -19,
                                       -19,
                                       -19,
                                       -19,
                                       -19,
                                       -19,
                                       -19,
                                       -19,
                                       -19,
                                       -19,
                                       -19,
                                       -19,
                                       -19,
                                       -19,
                                       // State 62
                                       -37,
                                       -37,
                                       -37,
                                       -37,
                                       -37,
                                       -37,
                                       -37,
                                       -37,
                                       -37,
                                       -37,
                                       -37,
                                       -37,
                                       -37,
                                       -37,
                                       -37,
                                       -37,
                                       -37,
                                       -37,
                                       -37,
                                       -37,
                                       -37,
                                       -37,
                                       -37,
                                       -37,
                                       -37,
                                       -37,
                                       -37,
                                       -37,
                                       -37,
                                       // State 63
                                       -11,
                                       -11,
                                       -11,
                                       -11,
                                       -11,
                                       -11,
                                       -11,
                                       -11,
                                       -11,
                                       -11,
                                       -11,
                                       -11,
                                       -11,
                                       -11,
                                       -11,
                                       -11,
                                       -11,
                                       -11,
                                       -11,
                                       -11,
                                       -11,
                                       -11,
                                       -11,
                                       -11,
                                       -11,
                                       -11,
                                       -11,
                                       -11,
                                       -11,
                                       // State 64
                                       -36,
                                       -36,
                                       -36,
                                       -36,
                                       -36,
                                       -36,
                                       -36,
                                       -36,
                                       -36,
                                       -36,
                                       -36,
                                       -36,
                                       -36,
                                       -36,
                                       -36,
                                       -36,
                                       -36,
                                       -36,
                                       -36,
                                       -36,
                                       -36,
                                       -36,
                                       -36,
                                       -36,
                                       -36,
                                       -36,
                                       -36,
                                       -36,
                                       -36,
                                       // State 65
                                       0,
                                       0,
                                       0,
                                       74,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       75,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       // State 66
                                       -5,
                                       -5,
                                       -5,
                                       -5,
                                       -5,
                                       -5,
                                       -5,
                                       -5,
                                       -5,
                                       -5,
                                       -5,
                                       -5,
                                       -5,
                                       -5,
                                       -5,
                                       -5,
                                       -5,
                                       -5,
                                       -5,
                                       -5,
                                       -5,
                                       -5,
                                       -5,
                                       -5,
                                       -5,
                                       -5,
                                       -5,
                                       -5,
                                       -5,
                                       // State 67
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       76,
                                       0,
                                       0,
                                       0,
                                       0,
                                       // State 68
                                       9,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       10,
                                       0,
                                       11,
                                       12,
                                       13,
                                       14,
                                       0,
                                       0,
                                       15,
                                       16,
                                       17,
                                       0,
                                       0,
                                       18,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       // State 69
                                       0,
                                       0,
                                       0,
                                       78,
                                       23,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       79,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       // State 70
                                       -2,
                                       -2,
                                       -2,
                                       -2,
                                       -2,
                                       -2,
                                       -2,
                                       -2,
                                       -2,
                                       -2,
                                       -2,
                                       -2,
                                       -2,
                                       -2,
                                       -2,
                                       -2,
                                       -2,
                                       -2,
                                       -2,
                                       -2,
                                       -2,
                                       -2,
                                       -2,
                                       -2,
                                       -2,
                                       -2,
                                       -2,
                                       -2,
                                       -2,
                                       // State 71
                                       -24,
                                       -24,
                                       -24,
                                       -24,
                                       -24,
                                       -24,
                                       -24,
                                       -24,
                                       -24,
                                       -24,
                                       -24,
                                       -24,
                                       -24,
                                       -24,
                                       -24,
                                       -24,
                                       -24,
                                       -24,
                                       -24,
                                       -24,
                                       -24,
                                       -24,
                                       -24,
                                       -24,
                                       -24,
                                       -24,
                                       -24,
                                       -24,
                                       -24,
                                       // State 72
                                       9,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       10,
                                       0,
                                       11,
                                       12,
                                       13,
                                       14,
                                       0,
                                       0,
                                       15,
                                       16,
                                       17,
                                       0,
                                       0,
                                       18,
                                       0,
                                       19,
                                       0,
                                       0,
                                       0,
                                       // State 73
                                       -6,
                                       -6,
                                       -6,
                                       -6,
                                       -6,
                                       -6,
                                       -6,
                                       -6,
                                       -6,
                                       -6,
                                       -6,
                                       -6,
                                       -6,
                                       -6,
                                       -6,
                                       -6,
                                       -6,
                                       -6,
                                       -6,
                                       -6,
                                       -6,
                                       -6,
                                       -6,
                                       -6,
                                       -6,
                                       -6,
                                       -6,
                                       -6,
                                       -6,
                                       // State 74
                                       -33,
                                       -33,
                                       -33,
                                       -33,
                                       -33,
                                       -33,
                                       -33,
                                       -33,
                                       -33,
                                       -33,
                                       -33,
                                       -33,
                                       -33,
                                       -33,
                                       -33,
                                       -33,
                                       -33,
                                       -33,
                                       -33,
                                       -33,
                                       -33,
                                       -33,
                                       -33,
                                       -33,
                                       -33,
                                       -33,
                                       -33,
                                       -33,
                                       -33,
                                       // State 75
                                       9,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       10,
                                       0,
                                       11,
                                       12,
                                       13,
                                       14,
                                       0,
                                       0,
                                       15,
                                       16,
                                       17,
                                       0,
                                       0,
                                       18,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       // State 76
                                       -15,
                                       -15,
                                       -15,
                                       -15,
                                       -15,
                                       -15,
                                       -15,
                                       -15,
                                       -15,
                                       -15,
                                       -15,
                                       -15,
                                       -15,
                                       -15,
                                       -15,
                                       -15,
                                       -15,
                                       -15,
                                       -15,
                                       -15,
                                       -15,
                                       -15,
                                       -15,
                                       -15,
                                       -15,
                                       -15,
                                       -15,
                                       -15,
                                       -15,
                                       // State 77
                                       -3,
                                       -3,
                                       -3,
                                       -3,
                                       -3,
                                       -3,
                                       -3,
                                       -3,
                                       -3,
                                       -3,
                                       -3,
                                       -3,
                                       -3,
                                       -3,
                                       -3,
                                       -3,
                                       -3,
                                       -3,
                                       -3,
                                       -3,
                                       -3,
                                       -3,
                                       -3,
                                       -3,
                                       -3,
                                       -3,
                                       -3,
                                       -3,
                                       -3,
                                       // State 78
                                       -23,
                                       -23,
                                       -23,
                                       -23,
                                       -23,
                                       -23,
                                       -23,
                                       -23,
                                       -23,
                                       -23,
                                       -23,
                                       -23,
                                       -23,
                                       -23,
                                       -23,
                                       -23,
                                       -23,
                                       -23,
                                       -23,
                                       -23,
                                       -23,
                                       -23,
                                       -23,
                                       -23,
                                       -23,
                                       -23,
                                       -23,
                                       -23,
                                       -23,
                                       // State 79
                                       -7,
                                       -7,
                                       -7,
                                       -7,
                                       -7,
                                       -7,
                                       -7,
                                       -7,
                                       -7,
                                       -7,
                                       -7,
                                       -7,
                                       -7,
                                       -7,
                                       -7,
                                       -7,
                                       -7,
                                       -7,
                                       -7,
                                       -7,
                                       -7,
                                       -7,
                                       -7,
                                       -7,
                                       -7,
                                       -7,
                                       -7,
                                       -7,
                                       -7,
                                       // State 80
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       82,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       // State 81
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       83,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       // State 82
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       31,
                                       0,
                                       0,
                                       // State 83
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       85,
                                       0,
                                       0,
                                       0,
                                       0,
                                       // State 84
                                       9,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       10,
                                       0,
                                       11,
                                       12,
                                       13,
                                       14,
                                       0,
                                       0,
                                       15,
                                       16,
                                       17,
                                       0,
                                       0,
                                       18,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       // State 85
                                       -16,
                                       -16,
                                       -16,
                                       -16,
                                       -16,
                                       -16,
                                       -16,
                                       -16,
                                       -16,
                                       -16,
                                       -16,
                                       -16,
                                       -16,
                                       -16,
                                       -16,
                                       -16,
                                       -16,
                                       -16,
                                       -16,
                                       -16,
                                       -16,
                                       -16,
                                       -16,
                                       -16,
                                       -16,
                                       -16,
                                       -16,
                                       -16,
                                       -16];
    const __EOF_ACTION: &'static [i32] =
        &[0, -10, -22, -17, -8, -31, -40, -14, 0, 0, -29, 0, 0, 0, -28, -30, 0, -18, 0, -9, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, -39, -21, -20, -38, -12, -13, 0, -34, -35, 0, -25, -32, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -26, -27, 0, 0, 0, -19, -37, -11, -36, 0, -5, 0, 0, 0,
          -2, -24, 0, -6, -33, 0, -15, -3, -23, -7, 0, 0, 0, 0, 0, -16];
    const __GOTO: &'static [i32] = &[// State 0
                                     0,
                                     0,
                                     0,
                                     0,
                                     2,
                                     3,
                                     0,
                                     4,
                                     5,
                                     6,
                                     0,
                                     7,
                                     8,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 1
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 2
                                     0,
                                     0,
                                     0,
                                     0,
                                     20,
                                     0,
                                     0,
                                     4,
                                     5,
                                     6,
                                     0,
                                     0,
                                     8,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 3
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 4
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 5
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 6
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 7
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 8
                                     0,
                                     0,
                                     0,
                                     0,
                                     2,
                                     3,
                                     0,
                                     4,
                                     5,
                                     6,
                                     0,
                                     24,
                                     8,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 9
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     4,
                                     25,
                                     6,
                                     0,
                                     0,
                                     8,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 10
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 11
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     4,
                                     26,
                                     6,
                                     0,
                                     0,
                                     8,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 12
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     6,
                                     0,
                                     0,
                                     27,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 13
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     6,
                                     0,
                                     0,
                                     28,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 14
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 15
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 16
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     6,
                                     0,
                                     0,
                                     29,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 17
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 18
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     30,
                                     0,
                                     0,
                                     // State 19
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 20
                                     0,
                                     0,
                                     0,
                                     0,
                                     2,
                                     3,
                                     0,
                                     4,
                                     5,
                                     6,
                                     0,
                                     32,
                                     8,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 21
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     33,
                                     0,
                                     0,
                                     0,
                                     34,
                                     0,
                                     0,
                                     35,
                                     36,
                                     0,
                                     0,
                                     0,
                                     // State 22
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     41,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 23
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 24
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 25
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 26
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 27
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 28
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 29
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 30
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 31
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 32
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 33
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 34
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 35
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 36
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     33,
                                     0,
                                     0,
                                     0,
                                     34,
                                     0,
                                     0,
                                     35,
                                     52,
                                     0,
                                     0,
                                     0,
                                     // State 37
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 38
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 39
                                     0,
                                     0,
                                     0,
                                     53,
                                     0,
                                     0,
                                     33,
                                     0,
                                     0,
                                     0,
                                     34,
                                     0,
                                     0,
                                     35,
                                     54,
                                     0,
                                     0,
                                     0,
                                     // State 40
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 41
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 42
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 43
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     4,
                                     56,
                                     6,
                                     0,
                                     0,
                                     8,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 44
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     33,
                                     0,
                                     0,
                                     0,
                                     34,
                                     0,
                                     0,
                                     35,
                                     57,
                                     0,
                                     0,
                                     0,
                                     // State 45
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     33,
                                     0,
                                     0,
                                     0,
                                     34,
                                     0,
                                     0,
                                     35,
                                     58,
                                     0,
                                     0,
                                     0,
                                     // State 46
                                     0,
                                     59,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     6,
                                     0,
                                     0,
                                     60,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 47
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     33,
                                     0,
                                     0,
                                     0,
                                     34,
                                     0,
                                     0,
                                     35,
                                     61,
                                     0,
                                     0,
                                     0,
                                     // State 48
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     33,
                                     0,
                                     0,
                                     0,
                                     62,
                                     0,
                                     0,
                                     35,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 49
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     33,
                                     0,
                                     0,
                                     0,
                                     34,
                                     0,
                                     0,
                                     35,
                                     63,
                                     0,
                                     0,
                                     0,
                                     // State 50
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     64,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     35,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 51
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 52
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     33,
                                     0,
                                     0,
                                     0,
                                     34,
                                     0,
                                     0,
                                     35,
                                     66,
                                     0,
                                     0,
                                     0,
                                     // State 53
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 54
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     68,
                                     0,
                                     0,
                                     // State 55
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 56
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 57
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 58
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     6,
                                     0,
                                     0,
                                     70,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 59
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 60
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 61
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 62
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 63
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 64
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 65
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 66
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 67
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 68
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     4,
                                     77,
                                     6,
                                     0,
                                     0,
                                     8,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 69
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 70
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 71
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 72
                                     0,
                                     0,
                                     0,
                                     0,
                                     80,
                                     0,
                                     0,
                                     4,
                                     5,
                                     6,
                                     0,
                                     0,
                                     8,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 73
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 74
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 75
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     4,
                                     81,
                                     6,
                                     0,
                                     0,
                                     8,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 76
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 77
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 78
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 79
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 80
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 81
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 82
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     84,
                                     0,
                                     0,
                                     // State 83
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 84
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     4,
                                     86,
                                     6,
                                     0,
                                     0,
                                     8,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 85
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0];
    fn __expected_tokens(__state: usize) -> Vec<::std::string::String> {
        const __TERMINAL: &'static [&'static str] = &[r###""(""###,
                                                      r###"")""###,
                                                      r###""+""###,
                                                      r###"",""###,
                                                      r###"".""###,
                                                      r###"":""###,
                                                      r###"";""###,
                                                      r###""Bool""###,
                                                      r###""Unit""###,
                                                      r###""as""###,
                                                      r###""case""###,
                                                      r###""else""###,
                                                      r###""false""###,
                                                      r###""if""###,
                                                      r###""inl""###,
                                                      r###""inr""###,
                                                      r###""of""###,
                                                      r###""then""###,
                                                      r###""true""###,
                                                      r###""unit""###,
                                                      r###""{""###,
                                                      r###""|""###,
                                                      r###""}""###,
                                                      r###"r#"[0-9]+"#"###,
                                                      r###"FatArrow"###,
                                                      r###"Lambda"###,
                                                      r###"Name"###,
                                                      r###"ThinArrow"###,
                                                      r###"Times"###];
        __ACTION[(__state * 29)..]
            .iter()
            .zip(__TERMINAL)
            .filter_map(|(&state, terminal)| {
                if state == 0 {
                    None
                } else {
                    Some(terminal.to_string())
                }
            })
            .collect()
    }
    pub fn parse_Term<'input>
        (input: &'input str)
         -> Result<Term, __lalrpop_util::ParseError<usize, (usize, &'input str), ()>> {
        let mut __tokens = super::__intern_token::__Matcher::new(input);
        let mut __states = vec![0_i32];
        let mut __symbols = vec![];
        let mut __integer;
        let mut __lookahead;
        let mut __last_location = Default::default();
        '__shift: loop {
            __lookahead = match __tokens.next() {
                Some(Ok(v)) => v,
                None => break '__shift,
                Some(Err(e)) => return Err(e),
            };
            __last_location = __lookahead.2.clone();
            __integer = match __lookahead.1 {
                (1, _) if true => 0,
                (2, _) if true => 1,
                (3, _) if true => 2,
                (4, _) if true => 3,
                (5, _) if true => 4,
                (6, _) if true => 5,
                (7, _) if true => 6,
                (8, _) if true => 7,
                (9, _) if true => 8,
                (10, _) if true => 9,
                (11, _) if true => 10,
                (12, _) if true => 11,
                (13, _) if true => 12,
                (14, _) if true => 13,
                (15, _) if true => 14,
                (16, _) if true => 15,
                (17, _) if true => 16,
                (18, _) if true => 17,
                (19, _) if true => 18,
                (20, _) if true => 19,
                (21, _) if true => 20,
                (22, _) if true => 21,
                (23, _) if true => 22,
                (0, _) if true => 23,
                (27, _) if true => 24,
                (25, _) if true => 25,
                (28, _) if true => 26,
                (26, _) if true => 27,
                (24, _) if true => 28,
                _ => {
                    let __state = *__states.last().unwrap() as usize;
                    let __error = __lalrpop_util::ParseError::UnrecognizedToken {
                        token: Some(__lookahead),
                        expected: __expected_tokens(__state),
                    };
                    return Err(__error);
                }
            };
            '__inner: loop {
                let __state = *__states.last().unwrap() as usize;
                let __action = __ACTION[__state * 29 + __integer];
                if __action > 0 {
                    let __symbol = match __integer {
                        0 => {
                            match __lookahead.1 {
                                (1, __tok0) => __Symbol::Term_22_28_22((__tok0)),
                                _ => unreachable!(),
                            }
                        }
                        1 => {
                            match __lookahead.1 {
                                (2, __tok0) => __Symbol::Term_22_29_22((__tok0)),
                                _ => unreachable!(),
                            }
                        }
                        2 => {
                            match __lookahead.1 {
                                (3, __tok0) => __Symbol::Term_22_2b_22((__tok0)),
                                _ => unreachable!(),
                            }
                        }
                        3 => {
                            match __lookahead.1 {
                                (4, __tok0) => __Symbol::Term_22_2c_22((__tok0)),
                                _ => unreachable!(),
                            }
                        }
                        4 => {
                            match __lookahead.1 {
                                (5, __tok0) => __Symbol::Term_22_2e_22((__tok0)),
                                _ => unreachable!(),
                            }
                        }
                        5 => {
                            match __lookahead.1 {
                                (6, __tok0) => __Symbol::Term_22_3a_22((__tok0)),
                                _ => unreachable!(),
                            }
                        }
                        6 => {
                            match __lookahead.1 {
                                (7, __tok0) => __Symbol::Term_22_3b_22((__tok0)),
                                _ => unreachable!(),
                            }
                        }
                        7 => {
                            match __lookahead.1 {
                                (8, __tok0) => __Symbol::Term_22Bool_22((__tok0)),
                                _ => unreachable!(),
                            }
                        }
                        8 => {
                            match __lookahead.1 {
                                (9, __tok0) => __Symbol::Term_22Unit_22((__tok0)),
                                _ => unreachable!(),
                            }
                        }
                        9 => {
                            match __lookahead.1 {
                                (10, __tok0) => __Symbol::Term_22as_22((__tok0)),
                                _ => unreachable!(),
                            }
                        }
                        10 => {
                            match __lookahead.1 {
                                (11, __tok0) => __Symbol::Term_22case_22((__tok0)),
                                _ => unreachable!(),
                            }
                        }
                        11 => {
                            match __lookahead.1 {
                                (12, __tok0) => __Symbol::Term_22else_22((__tok0)),
                                _ => unreachable!(),
                            }
                        }
                        12 => {
                            match __lookahead.1 {
                                (13, __tok0) => __Symbol::Term_22false_22((__tok0)),
                                _ => unreachable!(),
                            }
                        }
                        13 => {
                            match __lookahead.1 {
                                (14, __tok0) => __Symbol::Term_22if_22((__tok0)),
                                _ => unreachable!(),
                            }
                        }
                        14 => {
                            match __lookahead.1 {
                                (15, __tok0) => __Symbol::Term_22inl_22((__tok0)),
                                _ => unreachable!(),
                            }
                        }
                        15 => {
                            match __lookahead.1 {
                                (16, __tok0) => __Symbol::Term_22inr_22((__tok0)),
                                _ => unreachable!(),
                            }
                        }
                        16 => {
                            match __lookahead.1 {
                                (17, __tok0) => __Symbol::Term_22of_22((__tok0)),
                                _ => unreachable!(),
                            }
                        }
                        17 => {
                            match __lookahead.1 {
                                (18, __tok0) => __Symbol::Term_22then_22((__tok0)),
                                _ => unreachable!(),
                            }
                        }
                        18 => {
                            match __lookahead.1 {
                                (19, __tok0) => __Symbol::Term_22true_22((__tok0)),
                                _ => unreachable!(),
                            }
                        }
                        19 => {
                            match __lookahead.1 {
                                (20, __tok0) => __Symbol::Term_22unit_22((__tok0)),
                                _ => unreachable!(),
                            }
                        }
                        20 => {
                            match __lookahead.1 {
                                (21, __tok0) => __Symbol::Term_22_7b_22((__tok0)),
                                _ => unreachable!(),
                            }
                        }
                        21 => {
                            match __lookahead.1 {
                                (22, __tok0) => __Symbol::Term_22_7c_22((__tok0)),
                                _ => unreachable!(),
                            }
                        }
                        22 => {
                            match __lookahead.1 {
                                (23, __tok0) => __Symbol::Term_22_7d_22((__tok0)),
                                _ => unreachable!(),
                            }
                        }
                        23 => {
                            match __lookahead.1 {
                                (0, __tok0) => __Symbol::Termr_23_22_5b0_2d9_5d_2b_22_23((__tok0)),
                                _ => unreachable!(),
                            }
                        }
                        24 => {
                            match __lookahead.1 {
                                (27, __tok0) => __Symbol::TermFatArrow((__tok0)),
                                _ => unreachable!(),
                            }
                        }
                        25 => {
                            match __lookahead.1 {
                                (25, __tok0) => __Symbol::TermLambda((__tok0)),
                                _ => unreachable!(),
                            }
                        }
                        26 => {
                            match __lookahead.1 {
                                (28, __tok0) => __Symbol::TermName((__tok0)),
                                _ => unreachable!(),
                            }
                        }
                        27 => {
                            match __lookahead.1 {
                                (26, __tok0) => __Symbol::TermThinArrow((__tok0)),
                                _ => unreachable!(),
                            }
                        }
                        28 => {
                            match __lookahead.1 {
                                (24, __tok0) => __Symbol::TermTimes((__tok0)),
                                _ => unreachable!(),
                            }
                        }
                        _ => unreachable!(),
                    };
                    __states.push(__action - 1);
                    __symbols.push((__lookahead.0, __symbol, __lookahead.2));
                    continue '__shift;
                } else if __action < 0 {
                    if let Some(r) = __reduce(input,
                                              __action,
                                              Some(&__lookahead.0),
                                              &mut __states,
                                              &mut __symbols,
                                              ::std::marker::PhantomData::<()>) {
                        return r;
                    }
                } else {
                    let __state = *__states.last().unwrap() as usize;
                    let __error = __lalrpop_util::ParseError::UnrecognizedToken {
                        token: Some(__lookahead),
                        expected: __expected_tokens(__state),
                    };
                    return Err(__error);
                }
            }
        }
        loop {
            let __state = *__states.last().unwrap() as usize;
            let __action = __EOF_ACTION[__state];
            if __action < 0 {
                if let Some(r) = __reduce(input,
                                          __action,
                                          None,
                                          &mut __states,
                                          &mut __symbols,
                                          ::std::marker::PhantomData::<()>) {
                    return r;
                }
            } else {
                let __state = *__states.last().unwrap() as usize;
                let __error = __lalrpop_util::ParseError::UnrecognizedToken {
                    token: None,
                    expected: __expected_tokens(__state),
                };
                return Err(__error);
            }
        }
    }
    pub fn __reduce<'input>
        (input: &'input str,
         __action: i32,
         __lookahead_start: Option<&usize>,
         __states: &mut ::std::vec::Vec<i32>,
         __symbols: &mut ::std::vec::Vec<(usize, __Symbol<'input>, usize)>,
         _: ::std::marker::PhantomData<()>)
         -> Option<Result<Term, __lalrpop_util::ParseError<usize, (usize, &'input str), ()>>> {
        let __nonterminal = match -__action {
            1 => {
                // (<Terminal> ",") = Terminal, "," => ActionFn(40);
                let __sym1 = __pop_Term_22_2c_22(__symbols);
                let __sym0 = __pop_NtTerminal(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym1.2.clone();
                let __nt = super::__action40(input, __sym0, __sym1);
                let __states_len = __states.len();
                __states.truncate(__states_len - 2);
                __symbols.push((__start, __Symbol::Nt_28_3cTerminal_3e_20_22_2c_22_29(__nt), __end));
                0
            }
            2 => {
                // (<Terminal> ",")+ = Terminal, "," => ActionFn(41);
                let __sym1 = __pop_Term_22_2c_22(__symbols);
                let __sym0 = __pop_NtTerminal(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym1.2.clone();
                let __nt = super::__action41(input, __sym0, __sym1);
                let __states_len = __states.len();
                __states.truncate(__states_len - 2);
                __symbols.push((__start, __Symbol::Nt_28_3cTerminal_3e_20_22_2c_22_29_2b(__nt), __end));
                1
            }
            3 => {
                // (<Terminal> ",")+ = (<Terminal> ",")+, Terminal, "," => ActionFn(42);
                let __sym2 = __pop_Term_22_2c_22(__symbols);
                let __sym1 = __pop_NtTerminal(__symbols);
                let __sym0 = __pop_Nt_28_3cTerminal_3e_20_22_2c_22_29_2b(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym2.2.clone();
                let __nt = super::__action42(input, __sym0, __sym1, __sym2);
                let __states_len = __states.len();
                __states.truncate(__states_len - 3);
                __symbols.push((__start, __Symbol::Nt_28_3cTerminal_3e_20_22_2c_22_29_2b(__nt), __end));
                1
            }
            4 => {
                // (<Type> ",") = Type, "," => ActionFn(37);
                let __sym1 = __pop_Term_22_2c_22(__symbols);
                let __sym0 = __pop_NtType(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym1.2.clone();
                let __nt = super::__action37(input, __sym0, __sym1);
                let __states_len = __states.len();
                __states.truncate(__states_len - 2);
                __symbols.push((__start, __Symbol::Nt_28_3cType_3e_20_22_2c_22_29(__nt), __end));
                2
            }
            5 => {
                // (<Type> ",")+ = Type, "," => ActionFn(43);
                let __sym1 = __pop_Term_22_2c_22(__symbols);
                let __sym0 = __pop_NtType(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym1.2.clone();
                let __nt = super::__action43(input, __sym0, __sym1);
                let __states_len = __states.len();
                __states.truncate(__states_len - 2);
                __symbols.push((__start, __Symbol::Nt_28_3cType_3e_20_22_2c_22_29_2b(__nt), __end));
                3
            }
            6 => {
                // (<Type> ",")+ = (<Type> ",")+, Type, "," => ActionFn(44);
                let __sym2 = __pop_Term_22_2c_22(__symbols);
                let __sym1 = __pop_NtType(__symbols);
                let __sym0 = __pop_Nt_28_3cType_3e_20_22_2c_22_29_2b(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym2.2.clone();
                let __nt = super::__action44(input, __sym0, __sym1, __sym2);
                let __states_len = __states.len();
                __states.truncate(__states_len - 3);
                __symbols.push((__start, __Symbol::Nt_28_3cType_3e_20_22_2c_22_29_2b(__nt), __end));
                3
            }
            7 => {
                // Abstraction = Lambda, Variable, ":", Type, ".", Abstraction => ActionFn(6);
                let __sym5 = __pop_NtAbstraction(__symbols);
                let __sym4 = __pop_Term_22_2e_22(__symbols);
                let __sym3 = __pop_NtType(__symbols);
                let __sym2 = __pop_Term_22_3a_22(__symbols);
                let __sym1 = __pop_NtVariable(__symbols);
                let __sym0 = __pop_TermLambda(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym5.2.clone();
                let __nt = super::__action6(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
                let __states_len = __states.len();
                __states.truncate(__states_len - 6);
                __symbols.push((__start, __Symbol::NtAbstraction(__nt), __end));
                4
            }
            8 => {
                // Abstraction = Condition => ActionFn(7);
                let __sym0 = __pop_NtCondition(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action7(input, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::NtAbstraction(__nt), __end));
                4
            }
            9 => {
                // Application = Application, Abstraction => ActionFn(4);
                let __sym1 = __pop_NtAbstraction(__symbols);
                let __sym0 = __pop_NtApplication(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym1.2.clone();
                let __nt = super::__action4(input, __sym0, __sym1);
                let __states_len = __states.len();
                __states.truncate(__states_len - 2);
                __symbols.push((__start, __Symbol::NtApplication(__nt), __end));
                5
            }
            10 => {
                // Application = Abstraction => ActionFn(5);
                let __sym0 = __pop_NtAbstraction(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action5(input, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::NtApplication(__nt), __end));
                5
            }
            11 => {
                // ArrowType = TerminalType, ThinArrow, ArrowType => ActionFn(27);
                let __sym2 = __pop_NtArrowType(__symbols);
                let __sym1 = __pop_TermThinArrow(__symbols);
                let __sym0 = __pop_NtTerminalType(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym2.2.clone();
                let __nt = super::__action27(input, __sym0, __sym1, __sym2);
                let __states_len = __states.len();
                __states.truncate(__states_len - 3);
                __symbols.push((__start, __Symbol::NtArrowType(__nt), __end));
                6
            }
            12 => {
                // ArrowType = TerminalType => ActionFn(28);
                let __sym0 = __pop_NtTerminalType(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action28(input, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::NtArrowType(__nt), __end));
                6
            }
            13 => {
                // Ascription = Ascription, "as", Type => ActionFn(11);
                let __sym2 = __pop_NtType(__symbols);
                let __sym1 = __pop_Term_22as_22(__symbols);
                let __sym0 = __pop_NtAscription(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym2.2.clone();
                let __nt = super::__action11(input, __sym0, __sym1, __sym2);
                let __states_len = __states.len();
                __states.truncate(__states_len - 3);
                __symbols.push((__start, __Symbol::NtAscription(__nt), __end));
                7
            }
            14 => {
                // Ascription = Terminal => ActionFn(12);
                let __sym0 = __pop_NtTerminal(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action12(input, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::NtAscription(__nt), __end));
                7
            }
            15 => {
                // Condition = "if", Condition, "then", Condition, "else", Condition => ActionFn(8);
                let __sym5 = __pop_NtCondition(__symbols);
                let __sym4 = __pop_Term_22else_22(__symbols);
                let __sym3 = __pop_NtCondition(__symbols);
                let __sym2 = __pop_Term_22then_22(__symbols);
                let __sym1 = __pop_NtCondition(__symbols);
                let __sym0 = __pop_Term_22if_22(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym5.2.clone();
                let __nt = super::__action8(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
                let __states_len = __states.len();
                __states.truncate(__states_len - 6);
                __symbols.push((__start, __Symbol::NtCondition(__nt), __end));
                8
            }
            16 => {
                // Condition = "case", Condition, "of", "inl", Variable, FatArrow, Condition, "|", "inr", Variable, FatArrow, Condition => ActionFn(9);
                let __sym11 = __pop_NtCondition(__symbols);
                let __sym10 = __pop_TermFatArrow(__symbols);
                let __sym9 = __pop_NtVariable(__symbols);
                let __sym8 = __pop_Term_22inr_22(__symbols);
                let __sym7 = __pop_Term_22_7c_22(__symbols);
                let __sym6 = __pop_NtCondition(__symbols);
                let __sym5 = __pop_TermFatArrow(__symbols);
                let __sym4 = __pop_NtVariable(__symbols);
                let __sym3 = __pop_Term_22inl_22(__symbols);
                let __sym2 = __pop_Term_22of_22(__symbols);
                let __sym1 = __pop_NtCondition(__symbols);
                let __sym0 = __pop_Term_22case_22(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym11.2.clone();
                let __nt = super::__action9(input,
                                            __sym0,
                                            __sym1,
                                            __sym2,
                                            __sym3,
                                            __sym4,
                                            __sym5,
                                            __sym6,
                                            __sym7,
                                            __sym8,
                                            __sym9,
                                            __sym10,
                                            __sym11);
                let __states_len = __states.len();
                __states.truncate(__states_len - 12);
                __symbols.push((__start, __Symbol::NtCondition(__nt), __end));
                8
            }
            17 => {
                // Condition = Ascription => ActionFn(10);
                let __sym0 = __pop_NtAscription(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action10(input, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::NtCondition(__nt), __end));
                8
            }
            18 => {
                // Index = r#"[0-9]+"# => ActionFn(34);
                let __sym0 = __pop_Termr_23_22_5b0_2d9_5d_2b_22_23(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action34(input, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::NtIndex(__nt), __end));
                9
            }
            19 => {
                // ProductType = ArrowType, Times, ProductType => ActionFn(25);
                let __sym2 = __pop_NtProductType(__symbols);
                let __sym1 = __pop_TermTimes(__symbols);
                let __sym0 = __pop_NtArrowType(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym2.2.clone();
                let __nt = super::__action25(input, __sym0, __sym1, __sym2);
                let __states_len = __states.len();
                __states.truncate(__states_len - 3);
                __symbols.push((__start, __Symbol::NtProductType(__nt), __end));
                10
            }
            20 => {
                // ProductType = ArrowType => ActionFn(26);
                let __sym0 = __pop_NtArrowType(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action26(input, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::NtProductType(__nt), __end));
                10
            }
            21 => {
                // Term = Application, ";", Term => ActionFn(2);
                let __sym2 = __pop_NtTerm(__symbols);
                let __sym1 = __pop_Term_22_3b_22(__symbols);
                let __sym0 = __pop_NtApplication(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym2.2.clone();
                let __nt = super::__action2(input, __sym0, __sym1, __sym2);
                let __states_len = __states.len();
                __states.truncate(__states_len - 3);
                __symbols.push((__start, __Symbol::NtTerm(__nt), __end));
                11
            }
            22 => {
                // Term = Application => ActionFn(3);
                let __sym0 = __pop_NtApplication(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action3(input, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::NtTerm(__nt), __end));
                11
            }
            23 => {
                // Terminal = "{", Terminal, ",", (<Terminal> ",")+, Terminal, "}" => ActionFn(13);
                let __sym5 = __pop_Term_22_7d_22(__symbols);
                let __sym4 = __pop_NtTerminal(__symbols);
                let __sym3 = __pop_Nt_28_3cTerminal_3e_20_22_2c_22_29_2b(__symbols);
                let __sym2 = __pop_Term_22_2c_22(__symbols);
                let __sym1 = __pop_NtTerminal(__symbols);
                let __sym0 = __pop_Term_22_7b_22(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym5.2.clone();
                let __nt = super::__action13(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
                let __states_len = __states.len();
                __states.truncate(__states_len - 6);
                __symbols.push((__start, __Symbol::NtTerminal(__nt), __end));
                12
            }
            24 => {
                // Terminal = "{", Terminal, ",", Terminal, "}" => ActionFn(14);
                let __sym4 = __pop_Term_22_7d_22(__symbols);
                let __sym3 = __pop_NtTerminal(__symbols);
                let __sym2 = __pop_Term_22_2c_22(__symbols);
                let __sym1 = __pop_NtTerminal(__symbols);
                let __sym0 = __pop_Term_22_7b_22(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym4.2.clone();
                let __nt = super::__action14(input, __sym0, __sym1, __sym2, __sym3, __sym4);
                let __states_len = __states.len();
                __states.truncate(__states_len - 5);
                __symbols.push((__start, __Symbol::NtTerminal(__nt), __end));
                12
            }
            25 => {
                // Terminal = Terminal, ".", Index => ActionFn(15);
                let __sym2 = __pop_NtIndex(__symbols);
                let __sym1 = __pop_Term_22_2e_22(__symbols);
                let __sym0 = __pop_NtTerminal(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym2.2.clone();
                let __nt = super::__action15(input, __sym0, __sym1, __sym2);
                let __states_len = __states.len();
                __states.truncate(__states_len - 3);
                __symbols.push((__start, __Symbol::NtTerminal(__nt), __end));
                12
            }
            26 => {
                // Terminal = "inl", Terminal, "as", Type => ActionFn(16);
                let __sym3 = __pop_NtType(__symbols);
                let __sym2 = __pop_Term_22as_22(__symbols);
                let __sym1 = __pop_NtTerminal(__symbols);
                let __sym0 = __pop_Term_22inl_22(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym3.2.clone();
                let __nt = super::__action16(input, __sym0, __sym1, __sym2, __sym3);
                let __states_len = __states.len();
                __states.truncate(__states_len - 4);
                __symbols.push((__start, __Symbol::NtTerminal(__nt), __end));
                12
            }
            27 => {
                // Terminal = "inr", Terminal, "as", Type => ActionFn(17);
                let __sym3 = __pop_NtType(__symbols);
                let __sym2 = __pop_Term_22as_22(__symbols);
                let __sym1 = __pop_NtTerminal(__symbols);
                let __sym0 = __pop_Term_22inr_22(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym3.2.clone();
                let __nt = super::__action17(input, __sym0, __sym1, __sym2, __sym3);
                let __states_len = __states.len();
                __states.truncate(__states_len - 4);
                __symbols.push((__start, __Symbol::NtTerminal(__nt), __end));
                12
            }
            28 => {
                // Terminal = "true" => ActionFn(18);
                let __sym0 = __pop_Term_22true_22(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action18(input, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::NtTerminal(__nt), __end));
                12
            }
            29 => {
                // Terminal = "false" => ActionFn(19);
                let __sym0 = __pop_Term_22false_22(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action19(input, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::NtTerminal(__nt), __end));
                12
            }
            30 => {
                // Terminal = "unit" => ActionFn(20);
                let __sym0 = __pop_Term_22unit_22(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action20(input, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::NtTerminal(__nt), __end));
                12
            }
            31 => {
                // Terminal = Index => ActionFn(21);
                let __sym0 = __pop_NtIndex(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action21(input, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::NtTerminal(__nt), __end));
                12
            }
            32 => {
                // Terminal = "(", Term, ")" => ActionFn(22);
                let __sym2 = __pop_Term_22_29_22(__symbols);
                let __sym1 = __pop_NtTerm(__symbols);
                let __sym0 = __pop_Term_22_28_22(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym2.2.clone();
                let __nt = super::__action22(input, __sym0, __sym1, __sym2);
                let __states_len = __states.len();
                __states.truncate(__states_len - 3);
                __symbols.push((__start, __Symbol::NtTerminal(__nt), __end));
                12
            }
            33 => {
                // TerminalType = "{", (<Type> ",")+, Type, "}" => ActionFn(29);
                let __sym3 = __pop_Term_22_7d_22(__symbols);
                let __sym2 = __pop_NtType(__symbols);
                let __sym1 = __pop_Nt_28_3cType_3e_20_22_2c_22_29_2b(__symbols);
                let __sym0 = __pop_Term_22_7b_22(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym3.2.clone();
                let __nt = super::__action29(input, __sym0, __sym1, __sym2, __sym3);
                let __states_len = __states.len();
                __states.truncate(__states_len - 4);
                __symbols.push((__start, __Symbol::NtTerminalType(__nt), __end));
                13
            }
            34 => {
                // TerminalType = "Bool" => ActionFn(30);
                let __sym0 = __pop_Term_22Bool_22(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action30(input, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::NtTerminalType(__nt), __end));
                13
            }
            35 => {
                // TerminalType = "Unit" => ActionFn(31);
                let __sym0 = __pop_Term_22Unit_22(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action31(input, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::NtTerminalType(__nt), __end));
                13
            }
            36 => {
                // TerminalType = "(", Type, ")" => ActionFn(32);
                let __sym2 = __pop_Term_22_29_22(__symbols);
                let __sym1 = __pop_NtType(__symbols);
                let __sym0 = __pop_Term_22_28_22(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym2.2.clone();
                let __nt = super::__action32(input, __sym0, __sym1, __sym2);
                let __states_len = __states.len();
                __states.truncate(__states_len - 3);
                __symbols.push((__start, __Symbol::NtTerminalType(__nt), __end));
                13
            }
            37 => {
                // Type = ProductType, "+", Type => ActionFn(23);
                let __sym2 = __pop_NtType(__symbols);
                let __sym1 = __pop_Term_22_2b_22(__symbols);
                let __sym0 = __pop_NtProductType(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym2.2.clone();
                let __nt = super::__action23(input, __sym0, __sym1, __sym2);
                let __states_len = __states.len();
                __states.truncate(__states_len - 3);
                __symbols.push((__start, __Symbol::NtType(__nt), __end));
                14
            }
            38 => {
                // Type = ProductType => ActionFn(24);
                let __sym0 = __pop_NtProductType(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action24(input, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::NtType(__nt), __end));
                14
            }
            39 => {
                // Variable = Name => ActionFn(33);
                let __sym0 = __pop_TermName(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action33(input, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::NtVariable(__nt), __end));
                15
            }
            40 => {
                // __Term = Term => ActionFn(0);
                let __sym0 = __pop_NtTerm(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action0(input, __sym0);
                return Some(Ok(__nt));
            }
            41 => {
                // __Type = Type => ActionFn(1);
                let __sym0 = __pop_NtType(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action1(input, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::Nt____Type(__nt), __end));
                17
            }
            _ => panic!("invalid action code {}", __action),
        };
        let __state = *__states.last().unwrap() as usize;
        let __next_state = __GOTO[__state * 18 + __nonterminal] - 1;
        __states.push(__next_state);
        None
    }
    fn __pop_Term_22_28_22<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                      __Symbol<'input>,
                                                                      usize)>)
                                   -> (usize, &'input str, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Term_22_28_22(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_Term_22_29_22<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                      __Symbol<'input>,
                                                                      usize)>)
                                   -> (usize, &'input str, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Term_22_29_22(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_Term_22_2b_22<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                      __Symbol<'input>,
                                                                      usize)>)
                                   -> (usize, &'input str, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Term_22_2b_22(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_Term_22_2c_22<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                      __Symbol<'input>,
                                                                      usize)>)
                                   -> (usize, &'input str, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Term_22_2c_22(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_Term_22_2e_22<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                      __Symbol<'input>,
                                                                      usize)>)
                                   -> (usize, &'input str, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Term_22_2e_22(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_Term_22_3a_22<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                      __Symbol<'input>,
                                                                      usize)>)
                                   -> (usize, &'input str, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Term_22_3a_22(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_Term_22_3b_22<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                      __Symbol<'input>,
                                                                      usize)>)
                                   -> (usize, &'input str, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Term_22_3b_22(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_Term_22Bool_22<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                       __Symbol<'input>,
                                                                       usize)>)
                                    -> (usize, &'input str, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Term_22Bool_22(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_Term_22Unit_22<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                       __Symbol<'input>,
                                                                       usize)>)
                                    -> (usize, &'input str, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Term_22Unit_22(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_Term_22as_22<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                     __Symbol<'input>,
                                                                     usize)>)
                                  -> (usize, &'input str, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Term_22as_22(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_Term_22case_22<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                       __Symbol<'input>,
                                                                       usize)>)
                                    -> (usize, &'input str, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Term_22case_22(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_Term_22else_22<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                       __Symbol<'input>,
                                                                       usize)>)
                                    -> (usize, &'input str, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Term_22else_22(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_Term_22false_22<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                        __Symbol<'input>,
                                                                        usize)>)
                                     -> (usize, &'input str, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Term_22false_22(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_Term_22if_22<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                     __Symbol<'input>,
                                                                     usize)>)
                                  -> (usize, &'input str, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Term_22if_22(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_Term_22inl_22<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                      __Symbol<'input>,
                                                                      usize)>)
                                   -> (usize, &'input str, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Term_22inl_22(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_Term_22inr_22<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                      __Symbol<'input>,
                                                                      usize)>)
                                   -> (usize, &'input str, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Term_22inr_22(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_Term_22of_22<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                     __Symbol<'input>,
                                                                     usize)>)
                                  -> (usize, &'input str, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Term_22of_22(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_Term_22then_22<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                       __Symbol<'input>,
                                                                       usize)>)
                                    -> (usize, &'input str, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Term_22then_22(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_Term_22true_22<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                       __Symbol<'input>,
                                                                       usize)>)
                                    -> (usize, &'input str, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Term_22true_22(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_Term_22unit_22<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                       __Symbol<'input>,
                                                                       usize)>)
                                    -> (usize, &'input str, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Term_22unit_22(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_Term_22_7b_22<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                      __Symbol<'input>,
                                                                      usize)>)
                                   -> (usize, &'input str, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Term_22_7b_22(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_Term_22_7c_22<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                      __Symbol<'input>,
                                                                      usize)>)
                                   -> (usize, &'input str, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Term_22_7c_22(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_Term_22_7d_22<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                      __Symbol<'input>,
                                                                      usize)>)
                                   -> (usize, &'input str, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Term_22_7d_22(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_Termr_23_22_5b0_2d9_5d_2b_22_23<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, &'input str, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Termr_23_22_5b0_2d9_5d_2b_22_23(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_TermFatArrow<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                     __Symbol<'input>,
                                                                     usize)>)
                                  -> (usize, &'input str, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::TermFatArrow(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_TermLambda<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                   __Symbol<'input>,
                                                                   usize)>)
                                -> (usize, &'input str, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::TermLambda(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_TermName<'input>(__symbols: &mut ::std::vec::Vec<(usize, __Symbol<'input>, usize)>)
                              -> (usize, &'input str, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::TermName(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_TermThinArrow<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                      __Symbol<'input>,
                                                                      usize)>)
                                   -> (usize, &'input str, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::TermThinArrow(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_TermTimes<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                  __Symbol<'input>,
                                                                  usize)>)
                               -> (usize, &'input str, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::TermTimes(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_Nt_28_3cTerminal_3e_20_22_2c_22_29<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Term, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Nt_28_3cTerminal_3e_20_22_2c_22_29(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_Nt_28_3cTerminal_3e_20_22_2c_22_29_2b<'input>
        (__symbols: &mut ::std::vec::Vec<(usize, __Symbol<'input>, usize)>)
         -> (usize, ::std::vec::Vec<Term>, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Nt_28_3cTerminal_3e_20_22_2c_22_29_2b(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_Nt_28_3cType_3e_20_22_2c_22_29<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Type, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Nt_28_3cType_3e_20_22_2c_22_29(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_Nt_28_3cType_3e_20_22_2c_22_29_2b<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, ::std::vec::Vec<Type>, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Nt_28_3cType_3e_20_22_2c_22_29_2b(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_NtAbstraction<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                      __Symbol<'input>,
                                                                      usize)>)
                                   -> (usize, Term, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::NtAbstraction(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_NtApplication<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                      __Symbol<'input>,
                                                                      usize)>)
                                   -> (usize, Term, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::NtApplication(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_NtArrowType<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                    __Symbol<'input>,
                                                                    usize)>)
                                 -> (usize, Type, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::NtArrowType(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_NtAscription<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                     __Symbol<'input>,
                                                                     usize)>)
                                  -> (usize, Term, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::NtAscription(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_NtCondition<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                    __Symbol<'input>,
                                                                    usize)>)
                                 -> (usize, Term, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::NtCondition(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_NtIndex<'input>(__symbols: &mut ::std::vec::Vec<(usize, __Symbol<'input>, usize)>)
                             -> (usize, usize, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::NtIndex(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_NtProductType<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                      __Symbol<'input>,
                                                                      usize)>)
                                   -> (usize, Type, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::NtProductType(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_NtTerm<'input>(__symbols: &mut ::std::vec::Vec<(usize, __Symbol<'input>, usize)>)
                            -> (usize, Term, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::NtTerm(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_NtTerminal<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                   __Symbol<'input>,
                                                                   usize)>)
                                -> (usize, Term, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::NtTerminal(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_NtTerminalType<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                       __Symbol<'input>,
                                                                       usize)>)
                                    -> (usize, Type, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::NtTerminalType(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_NtType<'input>(__symbols: &mut ::std::vec::Vec<(usize, __Symbol<'input>, usize)>)
                            -> (usize, Type, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::NtType(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_NtVariable<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                   __Symbol<'input>,
                                                                   usize)>)
                                -> (usize, String, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::NtVariable(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_Nt____Term<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                   __Symbol<'input>,
                                                                   usize)>)
                                -> (usize, Term, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Nt____Term(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_Nt____Type<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                   __Symbol<'input>,
                                                                   usize)>)
                                -> (usize, Type, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Nt____Type(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
}
pub use self::__parse__Term::parse_Term;

mod __parse__Type {
    #![allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports)]

    use {Term, Type};
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(dead_code)]
    pub enum __Symbol<'input> {
        Term_22_28_22(&'input str),
        Term_22_29_22(&'input str),
        Term_22_2b_22(&'input str),
        Term_22_2c_22(&'input str),
        Term_22_2e_22(&'input str),
        Term_22_3a_22(&'input str),
        Term_22_3b_22(&'input str),
        Term_22Bool_22(&'input str),
        Term_22Unit_22(&'input str),
        Term_22as_22(&'input str),
        Term_22case_22(&'input str),
        Term_22else_22(&'input str),
        Term_22false_22(&'input str),
        Term_22if_22(&'input str),
        Term_22inl_22(&'input str),
        Term_22inr_22(&'input str),
        Term_22of_22(&'input str),
        Term_22then_22(&'input str),
        Term_22true_22(&'input str),
        Term_22unit_22(&'input str),
        Term_22_7b_22(&'input str),
        Term_22_7c_22(&'input str),
        Term_22_7d_22(&'input str),
        Termr_23_22_5b0_2d9_5d_2b_22_23(&'input str),
        TermFatArrow(&'input str),
        TermLambda(&'input str),
        TermName(&'input str),
        TermThinArrow(&'input str),
        TermTimes(&'input str),
        Nt_28_3cTerminal_3e_20_22_2c_22_29(Term),
        Nt_28_3cTerminal_3e_20_22_2c_22_29_2b(::std::vec::Vec<Term>),
        Nt_28_3cType_3e_20_22_2c_22_29(Type),
        Nt_28_3cType_3e_20_22_2c_22_29_2b(::std::vec::Vec<Type>),
        NtAbstraction(Term),
        NtApplication(Term),
        NtArrowType(Type),
        NtAscription(Term),
        NtCondition(Term),
        NtIndex(usize),
        NtProductType(Type),
        NtTerm(Term),
        NtTerminal(Term),
        NtTerminalType(Type),
        NtType(Type),
        NtVariable(String),
        Nt____Term(Term),
        Nt____Type(Type),
    }
    const __ACTION: &'static [i32] = &[// State 0
                                       6,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       7,
                                       8,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       9,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       // State 1
                                       0,
                                       -20,
                                       -20,
                                       -20,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       -20,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       10,
                                       // State 2
                                       0,
                                       -38,
                                       11,
                                       -38,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       -38,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       // State 3
                                       0,
                                       -12,
                                       -12,
                                       -12,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       -12,
                                       0,
                                       0,
                                       0,
                                       0,
                                       12,
                                       -12,
                                       // State 4
                                       -41,
                                       -41,
                                       -41,
                                       -41,
                                       -41,
                                       -41,
                                       -41,
                                       -41,
                                       -41,
                                       -41,
                                       -41,
                                       -41,
                                       -41,
                                       -41,
                                       -41,
                                       -41,
                                       -41,
                                       -41,
                                       -41,
                                       -41,
                                       -41,
                                       -41,
                                       -41,
                                       -41,
                                       -41,
                                       -41,
                                       -41,
                                       -41,
                                       -41,
                                       // State 5
                                       6,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       7,
                                       8,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       9,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       // State 6
                                       -34,
                                       -34,
                                       -34,
                                       -34,
                                       -34,
                                       -34,
                                       -34,
                                       -34,
                                       -34,
                                       -34,
                                       -34,
                                       -34,
                                       -34,
                                       -34,
                                       -34,
                                       -34,
                                       -34,
                                       -34,
                                       -34,
                                       -34,
                                       -34,
                                       -34,
                                       -34,
                                       -34,
                                       -34,
                                       -34,
                                       -34,
                                       -34,
                                       -34,
                                       // State 7
                                       -35,
                                       -35,
                                       -35,
                                       -35,
                                       -35,
                                       -35,
                                       -35,
                                       -35,
                                       -35,
                                       -35,
                                       -35,
                                       -35,
                                       -35,
                                       -35,
                                       -35,
                                       -35,
                                       -35,
                                       -35,
                                       -35,
                                       -35,
                                       -35,
                                       -35,
                                       -35,
                                       -35,
                                       -35,
                                       -35,
                                       -35,
                                       -35,
                                       -35,
                                       // State 8
                                       6,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       7,
                                       8,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       9,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       // State 9
                                       6,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       7,
                                       8,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       9,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       // State 10
                                       6,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       7,
                                       8,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       9,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       // State 11
                                       6,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       7,
                                       8,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       9,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       // State 12
                                       0,
                                       19,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       // State 13
                                       6,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       7,
                                       8,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       9,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       // State 14
                                       0,
                                       0,
                                       0,
                                       21,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       // State 15
                                       -19,
                                       -19,
                                       -19,
                                       -19,
                                       -19,
                                       -19,
                                       -19,
                                       -19,
                                       -19,
                                       -19,
                                       -19,
                                       -19,
                                       -19,
                                       -19,
                                       -19,
                                       -19,
                                       -19,
                                       -19,
                                       -19,
                                       -19,
                                       -19,
                                       -19,
                                       -19,
                                       -19,
                                       -19,
                                       -19,
                                       -19,
                                       -19,
                                       -19,
                                       // State 16
                                       -37,
                                       -37,
                                       -37,
                                       -37,
                                       -37,
                                       -37,
                                       -37,
                                       -37,
                                       -37,
                                       -37,
                                       -37,
                                       -37,
                                       -37,
                                       -37,
                                       -37,
                                       -37,
                                       -37,
                                       -37,
                                       -37,
                                       -37,
                                       -37,
                                       -37,
                                       -37,
                                       -37,
                                       -37,
                                       -37,
                                       -37,
                                       -37,
                                       -37,
                                       // State 17
                                       -11,
                                       -11,
                                       -11,
                                       -11,
                                       -11,
                                       -11,
                                       -11,
                                       -11,
                                       -11,
                                       -11,
                                       -11,
                                       -11,
                                       -11,
                                       -11,
                                       -11,
                                       -11,
                                       -11,
                                       -11,
                                       -11,
                                       -11,
                                       -11,
                                       -11,
                                       -11,
                                       -11,
                                       -11,
                                       -11,
                                       -11,
                                       -11,
                                       -11,
                                       // State 18
                                       -36,
                                       -36,
                                       -36,
                                       -36,
                                       -36,
                                       -36,
                                       -36,
                                       -36,
                                       -36,
                                       -36,
                                       -36,
                                       -36,
                                       -36,
                                       -36,
                                       -36,
                                       -36,
                                       -36,
                                       -36,
                                       -36,
                                       -36,
                                       -36,
                                       -36,
                                       -36,
                                       -36,
                                       -36,
                                       -36,
                                       -36,
                                       -36,
                                       -36,
                                       // State 19
                                       0,
                                       0,
                                       0,
                                       22,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       23,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       0,
                                       // State 20
                                       -5,
                                       -5,
                                       -5,
                                       -5,
                                       -5,
                                       -5,
                                       -5,
                                       -5,
                                       -5,
                                       -5,
                                       -5,
                                       -5,
                                       -5,
                                       -5,
                                       -5,
                                       -5,
                                       -5,
                                       -5,
                                       -5,
                                       -5,
                                       -5,
                                       -5,
                                       -5,
                                       -5,
                                       -5,
                                       -5,
                                       -5,
                                       -5,
                                       -5,
                                       // State 21
                                       -6,
                                       -6,
                                       -6,
                                       -6,
                                       -6,
                                       -6,
                                       -6,
                                       -6,
                                       -6,
                                       -6,
                                       -6,
                                       -6,
                                       -6,
                                       -6,
                                       -6,
                                       -6,
                                       -6,
                                       -6,
                                       -6,
                                       -6,
                                       -6,
                                       -6,
                                       -6,
                                       -6,
                                       -6,
                                       -6,
                                       -6,
                                       -6,
                                       -6,
                                       // State 22
                                       -33,
                                       -33,
                                       -33,
                                       -33,
                                       -33,
                                       -33,
                                       -33,
                                       -33,
                                       -33,
                                       -33,
                                       -33,
                                       -33,
                                       -33,
                                       -33,
                                       -33,
                                       -33,
                                       -33,
                                       -33,
                                       -33,
                                       -33,
                                       -33,
                                       -33,
                                       -33,
                                       -33,
                                       -33,
                                       -33,
                                       -33,
                                       -33,
                                       -33];
    const __EOF_ACTION: &'static [i32] = &[0, -20, -38, -12, -41, 0, -34, -35, 0, 0, 0, 0, 0, 0,
                                           0, -19, -37, -11, -36, 0, -5, -6, -33];
    const __GOTO: &'static [i32] = &[// State 0
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     2,
                                     0,
                                     0,
                                     0,
                                     3,
                                     0,
                                     0,
                                     4,
                                     5,
                                     0,
                                     0,
                                     0,
                                     // State 1
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 2
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 3
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 4
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 5
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     2,
                                     0,
                                     0,
                                     0,
                                     3,
                                     0,
                                     0,
                                     4,
                                     13,
                                     0,
                                     0,
                                     0,
                                     // State 6
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 7
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 8
                                     0,
                                     0,
                                     0,
                                     14,
                                     0,
                                     0,
                                     2,
                                     0,
                                     0,
                                     0,
                                     3,
                                     0,
                                     0,
                                     4,
                                     15,
                                     0,
                                     0,
                                     0,
                                     // State 9
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     2,
                                     0,
                                     0,
                                     0,
                                     16,
                                     0,
                                     0,
                                     4,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 10
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     2,
                                     0,
                                     0,
                                     0,
                                     3,
                                     0,
                                     0,
                                     4,
                                     17,
                                     0,
                                     0,
                                     0,
                                     // State 11
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     18,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     4,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 12
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 13
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     2,
                                     0,
                                     0,
                                     0,
                                     3,
                                     0,
                                     0,
                                     4,
                                     20,
                                     0,
                                     0,
                                     0,
                                     // State 14
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 15
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 16
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 17
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 18
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 19
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 20
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 21
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     // State 22
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0];
    fn __expected_tokens(__state: usize) -> Vec<::std::string::String> {
        const __TERMINAL: &'static [&'static str] = &[r###""(""###,
                                                      r###"")""###,
                                                      r###""+""###,
                                                      r###"",""###,
                                                      r###"".""###,
                                                      r###"":""###,
                                                      r###"";""###,
                                                      r###""Bool""###,
                                                      r###""Unit""###,
                                                      r###""as""###,
                                                      r###""case""###,
                                                      r###""else""###,
                                                      r###""false""###,
                                                      r###""if""###,
                                                      r###""inl""###,
                                                      r###""inr""###,
                                                      r###""of""###,
                                                      r###""then""###,
                                                      r###""true""###,
                                                      r###""unit""###,
                                                      r###""{""###,
                                                      r###""|""###,
                                                      r###""}""###,
                                                      r###"r#"[0-9]+"#"###,
                                                      r###"FatArrow"###,
                                                      r###"Lambda"###,
                                                      r###"Name"###,
                                                      r###"ThinArrow"###,
                                                      r###"Times"###];
        __ACTION[(__state * 29)..]
            .iter()
            .zip(__TERMINAL)
            .filter_map(|(&state, terminal)| {
                if state == 0 {
                    None
                } else {
                    Some(terminal.to_string())
                }
            })
            .collect()
    }
    pub fn parse_Type<'input>
        (input: &'input str)
         -> Result<Type, __lalrpop_util::ParseError<usize, (usize, &'input str), ()>> {
        let mut __tokens = super::__intern_token::__Matcher::new(input);
        let mut __states = vec![0_i32];
        let mut __symbols = vec![];
        let mut __integer;
        let mut __lookahead;
        let mut __last_location = Default::default();
        '__shift: loop {
            __lookahead = match __tokens.next() {
                Some(Ok(v)) => v,
                None => break '__shift,
                Some(Err(e)) => return Err(e),
            };
            __last_location = __lookahead.2.clone();
            __integer = match __lookahead.1 {
                (1, _) if true => 0,
                (2, _) if true => 1,
                (3, _) if true => 2,
                (4, _) if true => 3,
                (5, _) if true => 4,
                (6, _) if true => 5,
                (7, _) if true => 6,
                (8, _) if true => 7,
                (9, _) if true => 8,
                (10, _) if true => 9,
                (11, _) if true => 10,
                (12, _) if true => 11,
                (13, _) if true => 12,
                (14, _) if true => 13,
                (15, _) if true => 14,
                (16, _) if true => 15,
                (17, _) if true => 16,
                (18, _) if true => 17,
                (19, _) if true => 18,
                (20, _) if true => 19,
                (21, _) if true => 20,
                (22, _) if true => 21,
                (23, _) if true => 22,
                (0, _) if true => 23,
                (27, _) if true => 24,
                (25, _) if true => 25,
                (28, _) if true => 26,
                (26, _) if true => 27,
                (24, _) if true => 28,
                _ => {
                    let __state = *__states.last().unwrap() as usize;
                    let __error = __lalrpop_util::ParseError::UnrecognizedToken {
                        token: Some(__lookahead),
                        expected: __expected_tokens(__state),
                    };
                    return Err(__error);
                }
            };
            '__inner: loop {
                let __state = *__states.last().unwrap() as usize;
                let __action = __ACTION[__state * 29 + __integer];
                if __action > 0 {
                    let __symbol = match __integer {
                        0 => {
                            match __lookahead.1 {
                                (1, __tok0) => __Symbol::Term_22_28_22((__tok0)),
                                _ => unreachable!(),
                            }
                        }
                        1 => {
                            match __lookahead.1 {
                                (2, __tok0) => __Symbol::Term_22_29_22((__tok0)),
                                _ => unreachable!(),
                            }
                        }
                        2 => {
                            match __lookahead.1 {
                                (3, __tok0) => __Symbol::Term_22_2b_22((__tok0)),
                                _ => unreachable!(),
                            }
                        }
                        3 => {
                            match __lookahead.1 {
                                (4, __tok0) => __Symbol::Term_22_2c_22((__tok0)),
                                _ => unreachable!(),
                            }
                        }
                        4 => {
                            match __lookahead.1 {
                                (5, __tok0) => __Symbol::Term_22_2e_22((__tok0)),
                                _ => unreachable!(),
                            }
                        }
                        5 => {
                            match __lookahead.1 {
                                (6, __tok0) => __Symbol::Term_22_3a_22((__tok0)),
                                _ => unreachable!(),
                            }
                        }
                        6 => {
                            match __lookahead.1 {
                                (7, __tok0) => __Symbol::Term_22_3b_22((__tok0)),
                                _ => unreachable!(),
                            }
                        }
                        7 => {
                            match __lookahead.1 {
                                (8, __tok0) => __Symbol::Term_22Bool_22((__tok0)),
                                _ => unreachable!(),
                            }
                        }
                        8 => {
                            match __lookahead.1 {
                                (9, __tok0) => __Symbol::Term_22Unit_22((__tok0)),
                                _ => unreachable!(),
                            }
                        }
                        9 => {
                            match __lookahead.1 {
                                (10, __tok0) => __Symbol::Term_22as_22((__tok0)),
                                _ => unreachable!(),
                            }
                        }
                        10 => {
                            match __lookahead.1 {
                                (11, __tok0) => __Symbol::Term_22case_22((__tok0)),
                                _ => unreachable!(),
                            }
                        }
                        11 => {
                            match __lookahead.1 {
                                (12, __tok0) => __Symbol::Term_22else_22((__tok0)),
                                _ => unreachable!(),
                            }
                        }
                        12 => {
                            match __lookahead.1 {
                                (13, __tok0) => __Symbol::Term_22false_22((__tok0)),
                                _ => unreachable!(),
                            }
                        }
                        13 => {
                            match __lookahead.1 {
                                (14, __tok0) => __Symbol::Term_22if_22((__tok0)),
                                _ => unreachable!(),
                            }
                        }
                        14 => {
                            match __lookahead.1 {
                                (15, __tok0) => __Symbol::Term_22inl_22((__tok0)),
                                _ => unreachable!(),
                            }
                        }
                        15 => {
                            match __lookahead.1 {
                                (16, __tok0) => __Symbol::Term_22inr_22((__tok0)),
                                _ => unreachable!(),
                            }
                        }
                        16 => {
                            match __lookahead.1 {
                                (17, __tok0) => __Symbol::Term_22of_22((__tok0)),
                                _ => unreachable!(),
                            }
                        }
                        17 => {
                            match __lookahead.1 {
                                (18, __tok0) => __Symbol::Term_22then_22((__tok0)),
                                _ => unreachable!(),
                            }
                        }
                        18 => {
                            match __lookahead.1 {
                                (19, __tok0) => __Symbol::Term_22true_22((__tok0)),
                                _ => unreachable!(),
                            }
                        }
                        19 => {
                            match __lookahead.1 {
                                (20, __tok0) => __Symbol::Term_22unit_22((__tok0)),
                                _ => unreachable!(),
                            }
                        }
                        20 => {
                            match __lookahead.1 {
                                (21, __tok0) => __Symbol::Term_22_7b_22((__tok0)),
                                _ => unreachable!(),
                            }
                        }
                        21 => {
                            match __lookahead.1 {
                                (22, __tok0) => __Symbol::Term_22_7c_22((__tok0)),
                                _ => unreachable!(),
                            }
                        }
                        22 => {
                            match __lookahead.1 {
                                (23, __tok0) => __Symbol::Term_22_7d_22((__tok0)),
                                _ => unreachable!(),
                            }
                        }
                        23 => {
                            match __lookahead.1 {
                                (0, __tok0) => __Symbol::Termr_23_22_5b0_2d9_5d_2b_22_23((__tok0)),
                                _ => unreachable!(),
                            }
                        }
                        24 => {
                            match __lookahead.1 {
                                (27, __tok0) => __Symbol::TermFatArrow((__tok0)),
                                _ => unreachable!(),
                            }
                        }
                        25 => {
                            match __lookahead.1 {
                                (25, __tok0) => __Symbol::TermLambda((__tok0)),
                                _ => unreachable!(),
                            }
                        }
                        26 => {
                            match __lookahead.1 {
                                (28, __tok0) => __Symbol::TermName((__tok0)),
                                _ => unreachable!(),
                            }
                        }
                        27 => {
                            match __lookahead.1 {
                                (26, __tok0) => __Symbol::TermThinArrow((__tok0)),
                                _ => unreachable!(),
                            }
                        }
                        28 => {
                            match __lookahead.1 {
                                (24, __tok0) => __Symbol::TermTimes((__tok0)),
                                _ => unreachable!(),
                            }
                        }
                        _ => unreachable!(),
                    };
                    __states.push(__action - 1);
                    __symbols.push((__lookahead.0, __symbol, __lookahead.2));
                    continue '__shift;
                } else if __action < 0 {
                    if let Some(r) = __reduce(input,
                                              __action,
                                              Some(&__lookahead.0),
                                              &mut __states,
                                              &mut __symbols,
                                              ::std::marker::PhantomData::<()>) {
                        return r;
                    }
                } else {
                    let __state = *__states.last().unwrap() as usize;
                    let __error = __lalrpop_util::ParseError::UnrecognizedToken {
                        token: Some(__lookahead),
                        expected: __expected_tokens(__state),
                    };
                    return Err(__error);
                }
            }
        }
        loop {
            let __state = *__states.last().unwrap() as usize;
            let __action = __EOF_ACTION[__state];
            if __action < 0 {
                if let Some(r) = __reduce(input,
                                          __action,
                                          None,
                                          &mut __states,
                                          &mut __symbols,
                                          ::std::marker::PhantomData::<()>) {
                    return r;
                }
            } else {
                let __state = *__states.last().unwrap() as usize;
                let __error = __lalrpop_util::ParseError::UnrecognizedToken {
                    token: None,
                    expected: __expected_tokens(__state),
                };
                return Err(__error);
            }
        }
    }
    pub fn __reduce<'input>
        (input: &'input str,
         __action: i32,
         __lookahead_start: Option<&usize>,
         __states: &mut ::std::vec::Vec<i32>,
         __symbols: &mut ::std::vec::Vec<(usize, __Symbol<'input>, usize)>,
         _: ::std::marker::PhantomData<()>)
         -> Option<Result<Type, __lalrpop_util::ParseError<usize, (usize, &'input str), ()>>> {
        let __nonterminal = match -__action {
            1 => {
                // (<Terminal> ",") = Terminal, "," => ActionFn(40);
                let __sym1 = __pop_Term_22_2c_22(__symbols);
                let __sym0 = __pop_NtTerminal(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym1.2.clone();
                let __nt = super::__action40(input, __sym0, __sym1);
                let __states_len = __states.len();
                __states.truncate(__states_len - 2);
                __symbols.push((__start, __Symbol::Nt_28_3cTerminal_3e_20_22_2c_22_29(__nt), __end));
                0
            }
            2 => {
                // (<Terminal> ",")+ = Terminal, "," => ActionFn(41);
                let __sym1 = __pop_Term_22_2c_22(__symbols);
                let __sym0 = __pop_NtTerminal(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym1.2.clone();
                let __nt = super::__action41(input, __sym0, __sym1);
                let __states_len = __states.len();
                __states.truncate(__states_len - 2);
                __symbols.push((__start, __Symbol::Nt_28_3cTerminal_3e_20_22_2c_22_29_2b(__nt), __end));
                1
            }
            3 => {
                // (<Terminal> ",")+ = (<Terminal> ",")+, Terminal, "," => ActionFn(42);
                let __sym2 = __pop_Term_22_2c_22(__symbols);
                let __sym1 = __pop_NtTerminal(__symbols);
                let __sym0 = __pop_Nt_28_3cTerminal_3e_20_22_2c_22_29_2b(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym2.2.clone();
                let __nt = super::__action42(input, __sym0, __sym1, __sym2);
                let __states_len = __states.len();
                __states.truncate(__states_len - 3);
                __symbols.push((__start, __Symbol::Nt_28_3cTerminal_3e_20_22_2c_22_29_2b(__nt), __end));
                1
            }
            4 => {
                // (<Type> ",") = Type, "," => ActionFn(37);
                let __sym1 = __pop_Term_22_2c_22(__symbols);
                let __sym0 = __pop_NtType(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym1.2.clone();
                let __nt = super::__action37(input, __sym0, __sym1);
                let __states_len = __states.len();
                __states.truncate(__states_len - 2);
                __symbols.push((__start, __Symbol::Nt_28_3cType_3e_20_22_2c_22_29(__nt), __end));
                2
            }
            5 => {
                // (<Type> ",")+ = Type, "," => ActionFn(43);
                let __sym1 = __pop_Term_22_2c_22(__symbols);
                let __sym0 = __pop_NtType(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym1.2.clone();
                let __nt = super::__action43(input, __sym0, __sym1);
                let __states_len = __states.len();
                __states.truncate(__states_len - 2);
                __symbols.push((__start, __Symbol::Nt_28_3cType_3e_20_22_2c_22_29_2b(__nt), __end));
                3
            }
            6 => {
                // (<Type> ",")+ = (<Type> ",")+, Type, "," => ActionFn(44);
                let __sym2 = __pop_Term_22_2c_22(__symbols);
                let __sym1 = __pop_NtType(__symbols);
                let __sym0 = __pop_Nt_28_3cType_3e_20_22_2c_22_29_2b(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym2.2.clone();
                let __nt = super::__action44(input, __sym0, __sym1, __sym2);
                let __states_len = __states.len();
                __states.truncate(__states_len - 3);
                __symbols.push((__start, __Symbol::Nt_28_3cType_3e_20_22_2c_22_29_2b(__nt), __end));
                3
            }
            7 => {
                // Abstraction = Lambda, Variable, ":", Type, ".", Abstraction => ActionFn(6);
                let __sym5 = __pop_NtAbstraction(__symbols);
                let __sym4 = __pop_Term_22_2e_22(__symbols);
                let __sym3 = __pop_NtType(__symbols);
                let __sym2 = __pop_Term_22_3a_22(__symbols);
                let __sym1 = __pop_NtVariable(__symbols);
                let __sym0 = __pop_TermLambda(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym5.2.clone();
                let __nt = super::__action6(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
                let __states_len = __states.len();
                __states.truncate(__states_len - 6);
                __symbols.push((__start, __Symbol::NtAbstraction(__nt), __end));
                4
            }
            8 => {
                // Abstraction = Condition => ActionFn(7);
                let __sym0 = __pop_NtCondition(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action7(input, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::NtAbstraction(__nt), __end));
                4
            }
            9 => {
                // Application = Application, Abstraction => ActionFn(4);
                let __sym1 = __pop_NtAbstraction(__symbols);
                let __sym0 = __pop_NtApplication(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym1.2.clone();
                let __nt = super::__action4(input, __sym0, __sym1);
                let __states_len = __states.len();
                __states.truncate(__states_len - 2);
                __symbols.push((__start, __Symbol::NtApplication(__nt), __end));
                5
            }
            10 => {
                // Application = Abstraction => ActionFn(5);
                let __sym0 = __pop_NtAbstraction(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action5(input, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::NtApplication(__nt), __end));
                5
            }
            11 => {
                // ArrowType = TerminalType, ThinArrow, ArrowType => ActionFn(27);
                let __sym2 = __pop_NtArrowType(__symbols);
                let __sym1 = __pop_TermThinArrow(__symbols);
                let __sym0 = __pop_NtTerminalType(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym2.2.clone();
                let __nt = super::__action27(input, __sym0, __sym1, __sym2);
                let __states_len = __states.len();
                __states.truncate(__states_len - 3);
                __symbols.push((__start, __Symbol::NtArrowType(__nt), __end));
                6
            }
            12 => {
                // ArrowType = TerminalType => ActionFn(28);
                let __sym0 = __pop_NtTerminalType(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action28(input, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::NtArrowType(__nt), __end));
                6
            }
            13 => {
                // Ascription = Ascription, "as", Type => ActionFn(11);
                let __sym2 = __pop_NtType(__symbols);
                let __sym1 = __pop_Term_22as_22(__symbols);
                let __sym0 = __pop_NtAscription(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym2.2.clone();
                let __nt = super::__action11(input, __sym0, __sym1, __sym2);
                let __states_len = __states.len();
                __states.truncate(__states_len - 3);
                __symbols.push((__start, __Symbol::NtAscription(__nt), __end));
                7
            }
            14 => {
                // Ascription = Terminal => ActionFn(12);
                let __sym0 = __pop_NtTerminal(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action12(input, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::NtAscription(__nt), __end));
                7
            }
            15 => {
                // Condition = "if", Condition, "then", Condition, "else", Condition => ActionFn(8);
                let __sym5 = __pop_NtCondition(__symbols);
                let __sym4 = __pop_Term_22else_22(__symbols);
                let __sym3 = __pop_NtCondition(__symbols);
                let __sym2 = __pop_Term_22then_22(__symbols);
                let __sym1 = __pop_NtCondition(__symbols);
                let __sym0 = __pop_Term_22if_22(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym5.2.clone();
                let __nt = super::__action8(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
                let __states_len = __states.len();
                __states.truncate(__states_len - 6);
                __symbols.push((__start, __Symbol::NtCondition(__nt), __end));
                8
            }
            16 => {
                // Condition = "case", Condition, "of", "inl", Variable, FatArrow, Condition, "|", "inr", Variable, FatArrow, Condition => ActionFn(9);
                let __sym11 = __pop_NtCondition(__symbols);
                let __sym10 = __pop_TermFatArrow(__symbols);
                let __sym9 = __pop_NtVariable(__symbols);
                let __sym8 = __pop_Term_22inr_22(__symbols);
                let __sym7 = __pop_Term_22_7c_22(__symbols);
                let __sym6 = __pop_NtCondition(__symbols);
                let __sym5 = __pop_TermFatArrow(__symbols);
                let __sym4 = __pop_NtVariable(__symbols);
                let __sym3 = __pop_Term_22inl_22(__symbols);
                let __sym2 = __pop_Term_22of_22(__symbols);
                let __sym1 = __pop_NtCondition(__symbols);
                let __sym0 = __pop_Term_22case_22(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym11.2.clone();
                let __nt = super::__action9(input,
                                            __sym0,
                                            __sym1,
                                            __sym2,
                                            __sym3,
                                            __sym4,
                                            __sym5,
                                            __sym6,
                                            __sym7,
                                            __sym8,
                                            __sym9,
                                            __sym10,
                                            __sym11);
                let __states_len = __states.len();
                __states.truncate(__states_len - 12);
                __symbols.push((__start, __Symbol::NtCondition(__nt), __end));
                8
            }
            17 => {
                // Condition = Ascription => ActionFn(10);
                let __sym0 = __pop_NtAscription(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action10(input, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::NtCondition(__nt), __end));
                8
            }
            18 => {
                // Index = r#"[0-9]+"# => ActionFn(34);
                let __sym0 = __pop_Termr_23_22_5b0_2d9_5d_2b_22_23(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action34(input, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::NtIndex(__nt), __end));
                9
            }
            19 => {
                // ProductType = ArrowType, Times, ProductType => ActionFn(25);
                let __sym2 = __pop_NtProductType(__symbols);
                let __sym1 = __pop_TermTimes(__symbols);
                let __sym0 = __pop_NtArrowType(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym2.2.clone();
                let __nt = super::__action25(input, __sym0, __sym1, __sym2);
                let __states_len = __states.len();
                __states.truncate(__states_len - 3);
                __symbols.push((__start, __Symbol::NtProductType(__nt), __end));
                10
            }
            20 => {
                // ProductType = ArrowType => ActionFn(26);
                let __sym0 = __pop_NtArrowType(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action26(input, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::NtProductType(__nt), __end));
                10
            }
            21 => {
                // Term = Application, ";", Term => ActionFn(2);
                let __sym2 = __pop_NtTerm(__symbols);
                let __sym1 = __pop_Term_22_3b_22(__symbols);
                let __sym0 = __pop_NtApplication(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym2.2.clone();
                let __nt = super::__action2(input, __sym0, __sym1, __sym2);
                let __states_len = __states.len();
                __states.truncate(__states_len - 3);
                __symbols.push((__start, __Symbol::NtTerm(__nt), __end));
                11
            }
            22 => {
                // Term = Application => ActionFn(3);
                let __sym0 = __pop_NtApplication(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action3(input, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::NtTerm(__nt), __end));
                11
            }
            23 => {
                // Terminal = "{", Terminal, ",", (<Terminal> ",")+, Terminal, "}" => ActionFn(13);
                let __sym5 = __pop_Term_22_7d_22(__symbols);
                let __sym4 = __pop_NtTerminal(__symbols);
                let __sym3 = __pop_Nt_28_3cTerminal_3e_20_22_2c_22_29_2b(__symbols);
                let __sym2 = __pop_Term_22_2c_22(__symbols);
                let __sym1 = __pop_NtTerminal(__symbols);
                let __sym0 = __pop_Term_22_7b_22(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym5.2.clone();
                let __nt = super::__action13(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
                let __states_len = __states.len();
                __states.truncate(__states_len - 6);
                __symbols.push((__start, __Symbol::NtTerminal(__nt), __end));
                12
            }
            24 => {
                // Terminal = "{", Terminal, ",", Terminal, "}" => ActionFn(14);
                let __sym4 = __pop_Term_22_7d_22(__symbols);
                let __sym3 = __pop_NtTerminal(__symbols);
                let __sym2 = __pop_Term_22_2c_22(__symbols);
                let __sym1 = __pop_NtTerminal(__symbols);
                let __sym0 = __pop_Term_22_7b_22(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym4.2.clone();
                let __nt = super::__action14(input, __sym0, __sym1, __sym2, __sym3, __sym4);
                let __states_len = __states.len();
                __states.truncate(__states_len - 5);
                __symbols.push((__start, __Symbol::NtTerminal(__nt), __end));
                12
            }
            25 => {
                // Terminal = Terminal, ".", Index => ActionFn(15);
                let __sym2 = __pop_NtIndex(__symbols);
                let __sym1 = __pop_Term_22_2e_22(__symbols);
                let __sym0 = __pop_NtTerminal(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym2.2.clone();
                let __nt = super::__action15(input, __sym0, __sym1, __sym2);
                let __states_len = __states.len();
                __states.truncate(__states_len - 3);
                __symbols.push((__start, __Symbol::NtTerminal(__nt), __end));
                12
            }
            26 => {
                // Terminal = "inl", Terminal, "as", Type => ActionFn(16);
                let __sym3 = __pop_NtType(__symbols);
                let __sym2 = __pop_Term_22as_22(__symbols);
                let __sym1 = __pop_NtTerminal(__symbols);
                let __sym0 = __pop_Term_22inl_22(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym3.2.clone();
                let __nt = super::__action16(input, __sym0, __sym1, __sym2, __sym3);
                let __states_len = __states.len();
                __states.truncate(__states_len - 4);
                __symbols.push((__start, __Symbol::NtTerminal(__nt), __end));
                12
            }
            27 => {
                // Terminal = "inr", Terminal, "as", Type => ActionFn(17);
                let __sym3 = __pop_NtType(__symbols);
                let __sym2 = __pop_Term_22as_22(__symbols);
                let __sym1 = __pop_NtTerminal(__symbols);
                let __sym0 = __pop_Term_22inr_22(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym3.2.clone();
                let __nt = super::__action17(input, __sym0, __sym1, __sym2, __sym3);
                let __states_len = __states.len();
                __states.truncate(__states_len - 4);
                __symbols.push((__start, __Symbol::NtTerminal(__nt), __end));
                12
            }
            28 => {
                // Terminal = "true" => ActionFn(18);
                let __sym0 = __pop_Term_22true_22(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action18(input, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::NtTerminal(__nt), __end));
                12
            }
            29 => {
                // Terminal = "false" => ActionFn(19);
                let __sym0 = __pop_Term_22false_22(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action19(input, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::NtTerminal(__nt), __end));
                12
            }
            30 => {
                // Terminal = "unit" => ActionFn(20);
                let __sym0 = __pop_Term_22unit_22(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action20(input, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::NtTerminal(__nt), __end));
                12
            }
            31 => {
                // Terminal = Index => ActionFn(21);
                let __sym0 = __pop_NtIndex(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action21(input, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::NtTerminal(__nt), __end));
                12
            }
            32 => {
                // Terminal = "(", Term, ")" => ActionFn(22);
                let __sym2 = __pop_Term_22_29_22(__symbols);
                let __sym1 = __pop_NtTerm(__symbols);
                let __sym0 = __pop_Term_22_28_22(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym2.2.clone();
                let __nt = super::__action22(input, __sym0, __sym1, __sym2);
                let __states_len = __states.len();
                __states.truncate(__states_len - 3);
                __symbols.push((__start, __Symbol::NtTerminal(__nt), __end));
                12
            }
            33 => {
                // TerminalType = "{", (<Type> ",")+, Type, "}" => ActionFn(29);
                let __sym3 = __pop_Term_22_7d_22(__symbols);
                let __sym2 = __pop_NtType(__symbols);
                let __sym1 = __pop_Nt_28_3cType_3e_20_22_2c_22_29_2b(__symbols);
                let __sym0 = __pop_Term_22_7b_22(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym3.2.clone();
                let __nt = super::__action29(input, __sym0, __sym1, __sym2, __sym3);
                let __states_len = __states.len();
                __states.truncate(__states_len - 4);
                __symbols.push((__start, __Symbol::NtTerminalType(__nt), __end));
                13
            }
            34 => {
                // TerminalType = "Bool" => ActionFn(30);
                let __sym0 = __pop_Term_22Bool_22(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action30(input, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::NtTerminalType(__nt), __end));
                13
            }
            35 => {
                // TerminalType = "Unit" => ActionFn(31);
                let __sym0 = __pop_Term_22Unit_22(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action31(input, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::NtTerminalType(__nt), __end));
                13
            }
            36 => {
                // TerminalType = "(", Type, ")" => ActionFn(32);
                let __sym2 = __pop_Term_22_29_22(__symbols);
                let __sym1 = __pop_NtType(__symbols);
                let __sym0 = __pop_Term_22_28_22(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym2.2.clone();
                let __nt = super::__action32(input, __sym0, __sym1, __sym2);
                let __states_len = __states.len();
                __states.truncate(__states_len - 3);
                __symbols.push((__start, __Symbol::NtTerminalType(__nt), __end));
                13
            }
            37 => {
                // Type = ProductType, "+", Type => ActionFn(23);
                let __sym2 = __pop_NtType(__symbols);
                let __sym1 = __pop_Term_22_2b_22(__symbols);
                let __sym0 = __pop_NtProductType(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym2.2.clone();
                let __nt = super::__action23(input, __sym0, __sym1, __sym2);
                let __states_len = __states.len();
                __states.truncate(__states_len - 3);
                __symbols.push((__start, __Symbol::NtType(__nt), __end));
                14
            }
            38 => {
                // Type = ProductType => ActionFn(24);
                let __sym0 = __pop_NtProductType(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action24(input, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::NtType(__nt), __end));
                14
            }
            39 => {
                // Variable = Name => ActionFn(33);
                let __sym0 = __pop_TermName(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action33(input, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::NtVariable(__nt), __end));
                15
            }
            40 => {
                // __Term = Term => ActionFn(0);
                let __sym0 = __pop_NtTerm(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action0(input, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::Nt____Term(__nt), __end));
                16
            }
            41 => {
                // __Type = Type => ActionFn(1);
                let __sym0 = __pop_NtType(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action1(input, __sym0);
                return Some(Ok(__nt));
            }
            _ => panic!("invalid action code {}", __action),
        };
        let __state = *__states.last().unwrap() as usize;
        let __next_state = __GOTO[__state * 18 + __nonterminal] - 1;
        __states.push(__next_state);
        None
    }
    fn __pop_Term_22_28_22<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                      __Symbol<'input>,
                                                                      usize)>)
                                   -> (usize, &'input str, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Term_22_28_22(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_Term_22_29_22<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                      __Symbol<'input>,
                                                                      usize)>)
                                   -> (usize, &'input str, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Term_22_29_22(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_Term_22_2b_22<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                      __Symbol<'input>,
                                                                      usize)>)
                                   -> (usize, &'input str, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Term_22_2b_22(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_Term_22_2c_22<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                      __Symbol<'input>,
                                                                      usize)>)
                                   -> (usize, &'input str, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Term_22_2c_22(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_Term_22_2e_22<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                      __Symbol<'input>,
                                                                      usize)>)
                                   -> (usize, &'input str, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Term_22_2e_22(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_Term_22_3a_22<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                      __Symbol<'input>,
                                                                      usize)>)
                                   -> (usize, &'input str, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Term_22_3a_22(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_Term_22_3b_22<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                      __Symbol<'input>,
                                                                      usize)>)
                                   -> (usize, &'input str, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Term_22_3b_22(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_Term_22Bool_22<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                       __Symbol<'input>,
                                                                       usize)>)
                                    -> (usize, &'input str, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Term_22Bool_22(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_Term_22Unit_22<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                       __Symbol<'input>,
                                                                       usize)>)
                                    -> (usize, &'input str, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Term_22Unit_22(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_Term_22as_22<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                     __Symbol<'input>,
                                                                     usize)>)
                                  -> (usize, &'input str, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Term_22as_22(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_Term_22case_22<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                       __Symbol<'input>,
                                                                       usize)>)
                                    -> (usize, &'input str, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Term_22case_22(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_Term_22else_22<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                       __Symbol<'input>,
                                                                       usize)>)
                                    -> (usize, &'input str, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Term_22else_22(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_Term_22false_22<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                        __Symbol<'input>,
                                                                        usize)>)
                                     -> (usize, &'input str, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Term_22false_22(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_Term_22if_22<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                     __Symbol<'input>,
                                                                     usize)>)
                                  -> (usize, &'input str, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Term_22if_22(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_Term_22inl_22<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                      __Symbol<'input>,
                                                                      usize)>)
                                   -> (usize, &'input str, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Term_22inl_22(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_Term_22inr_22<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                      __Symbol<'input>,
                                                                      usize)>)
                                   -> (usize, &'input str, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Term_22inr_22(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_Term_22of_22<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                     __Symbol<'input>,
                                                                     usize)>)
                                  -> (usize, &'input str, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Term_22of_22(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_Term_22then_22<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                       __Symbol<'input>,
                                                                       usize)>)
                                    -> (usize, &'input str, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Term_22then_22(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_Term_22true_22<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                       __Symbol<'input>,
                                                                       usize)>)
                                    -> (usize, &'input str, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Term_22true_22(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_Term_22unit_22<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                       __Symbol<'input>,
                                                                       usize)>)
                                    -> (usize, &'input str, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Term_22unit_22(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_Term_22_7b_22<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                      __Symbol<'input>,
                                                                      usize)>)
                                   -> (usize, &'input str, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Term_22_7b_22(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_Term_22_7c_22<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                      __Symbol<'input>,
                                                                      usize)>)
                                   -> (usize, &'input str, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Term_22_7c_22(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_Term_22_7d_22<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                      __Symbol<'input>,
                                                                      usize)>)
                                   -> (usize, &'input str, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Term_22_7d_22(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_Termr_23_22_5b0_2d9_5d_2b_22_23<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, &'input str, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Termr_23_22_5b0_2d9_5d_2b_22_23(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_TermFatArrow<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                     __Symbol<'input>,
                                                                     usize)>)
                                  -> (usize, &'input str, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::TermFatArrow(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_TermLambda<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                   __Symbol<'input>,
                                                                   usize)>)
                                -> (usize, &'input str, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::TermLambda(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_TermName<'input>(__symbols: &mut ::std::vec::Vec<(usize, __Symbol<'input>, usize)>)
                              -> (usize, &'input str, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::TermName(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_TermThinArrow<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                      __Symbol<'input>,
                                                                      usize)>)
                                   -> (usize, &'input str, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::TermThinArrow(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_TermTimes<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                  __Symbol<'input>,
                                                                  usize)>)
                               -> (usize, &'input str, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::TermTimes(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_Nt_28_3cTerminal_3e_20_22_2c_22_29<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Term, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Nt_28_3cTerminal_3e_20_22_2c_22_29(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_Nt_28_3cTerminal_3e_20_22_2c_22_29_2b<'input>
        (__symbols: &mut ::std::vec::Vec<(usize, __Symbol<'input>, usize)>)
         -> (usize, ::std::vec::Vec<Term>, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Nt_28_3cTerminal_3e_20_22_2c_22_29_2b(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_Nt_28_3cType_3e_20_22_2c_22_29<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Type, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Nt_28_3cType_3e_20_22_2c_22_29(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_Nt_28_3cType_3e_20_22_2c_22_29_2b<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, ::std::vec::Vec<Type>, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Nt_28_3cType_3e_20_22_2c_22_29_2b(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_NtAbstraction<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                      __Symbol<'input>,
                                                                      usize)>)
                                   -> (usize, Term, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::NtAbstraction(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_NtApplication<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                      __Symbol<'input>,
                                                                      usize)>)
                                   -> (usize, Term, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::NtApplication(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_NtArrowType<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                    __Symbol<'input>,
                                                                    usize)>)
                                 -> (usize, Type, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::NtArrowType(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_NtAscription<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                     __Symbol<'input>,
                                                                     usize)>)
                                  -> (usize, Term, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::NtAscription(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_NtCondition<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                    __Symbol<'input>,
                                                                    usize)>)
                                 -> (usize, Term, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::NtCondition(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_NtIndex<'input>(__symbols: &mut ::std::vec::Vec<(usize, __Symbol<'input>, usize)>)
                             -> (usize, usize, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::NtIndex(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_NtProductType<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                      __Symbol<'input>,
                                                                      usize)>)
                                   -> (usize, Type, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::NtProductType(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_NtTerm<'input>(__symbols: &mut ::std::vec::Vec<(usize, __Symbol<'input>, usize)>)
                            -> (usize, Term, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::NtTerm(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_NtTerminal<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                   __Symbol<'input>,
                                                                   usize)>)
                                -> (usize, Term, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::NtTerminal(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_NtTerminalType<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                       __Symbol<'input>,
                                                                       usize)>)
                                    -> (usize, Type, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::NtTerminalType(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_NtType<'input>(__symbols: &mut ::std::vec::Vec<(usize, __Symbol<'input>, usize)>)
                            -> (usize, Type, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::NtType(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_NtVariable<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                   __Symbol<'input>,
                                                                   usize)>)
                                -> (usize, String, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::NtVariable(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_Nt____Term<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                   __Symbol<'input>,
                                                                   usize)>)
                                -> (usize, Term, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Nt____Term(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
    fn __pop_Nt____Type<'input>(__symbols: &mut ::std::vec::Vec<(usize,
                                                                   __Symbol<'input>,
                                                                   usize)>)
                                -> (usize, Type, usize) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Nt____Type(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch"),
        }
    }
}
pub use self::__parse__Type::parse_Type;
mod __intern_token {
    #![allow(unused_imports)]
    use {Term, Type};
    extern crate lalrpop_util as __lalrpop_util;
    extern crate regex as __regex;
    pub struct __Matcher<'input> {
        text: &'input str,
        consumed: usize,
        regex_set: __regex::RegexSet,
        regex_vec: Vec<__regex::Regex>,
    }

    impl<'input> __Matcher<'input> {
        pub fn new(s: &'input str) -> __Matcher<'input> {
            let __strs: &[&str] = &["^(?u:[0-9])+",
                                    "^(?u:\\()",
                                    "^(?u:\\))",
                                    "^(?u:\\+)",
                                    "^(?u:,)",
                                    "^(?u:\\.)",
                                    "^(?u::)",
                                    "^(?u:;)",
                                    "^(?u:Bool)",
                                    "^(?u:Unit)",
                                    "^(?u:as)",
                                    "^(?u:case)",
                                    "^(?u:else)",
                                    "^(?u:false)",
                                    "^(?u:if)",
                                    "^(?u:inl)",
                                    "^(?u:inr)",
                                    "^(?u:of)",
                                    "^(?u:then)",
                                    "^(?u:true)",
                                    "^(?u:unit)",
                                    "^(?u:\\{)",
                                    "^(?u:\\|)",
                                    "^(?u:\\})",
                                    "^((?u:×)|(?u:\\*))",
                                    "^((?u:λ)|(?u:lambda))",
                                    "^((?u:→)|(?u:\\->))",
                                    "^((?u:⇒)|(?u:=>))",
                                    "^(?u:[a-z])(?u:\')*"];
            let __regex_set = __regex::RegexSet::new(__strs).unwrap();
            let __regex_vec = vec![__regex::Regex::new("^(?u:[0-9])+").unwrap(),
                                   __regex::Regex::new("^(?u:\\()").unwrap(),
                                   __regex::Regex::new("^(?u:\\))").unwrap(),
                                   __regex::Regex::new("^(?u:\\+)").unwrap(),
                                   __regex::Regex::new("^(?u:,)").unwrap(),
                                   __regex::Regex::new("^(?u:\\.)").unwrap(),
                                   __regex::Regex::new("^(?u::)").unwrap(),
                                   __regex::Regex::new("^(?u:;)").unwrap(),
                                   __regex::Regex::new("^(?u:Bool)").unwrap(),
                                   __regex::Regex::new("^(?u:Unit)").unwrap(),
                                   __regex::Regex::new("^(?u:as)").unwrap(),
                                   __regex::Regex::new("^(?u:case)").unwrap(),
                                   __regex::Regex::new("^(?u:else)").unwrap(),
                                   __regex::Regex::new("^(?u:false)").unwrap(),
                                   __regex::Regex::new("^(?u:if)").unwrap(),
                                   __regex::Regex::new("^(?u:inl)").unwrap(),
                                   __regex::Regex::new("^(?u:inr)").unwrap(),
                                   __regex::Regex::new("^(?u:of)").unwrap(),
                                   __regex::Regex::new("^(?u:then)").unwrap(),
                                   __regex::Regex::new("^(?u:true)").unwrap(),
                                   __regex::Regex::new("^(?u:unit)").unwrap(),
                                   __regex::Regex::new("^(?u:\\{)").unwrap(),
                                   __regex::Regex::new("^(?u:\\|)").unwrap(),
                                   __regex::Regex::new("^(?u:\\})").unwrap(),
                                   __regex::Regex::new("^((?u:×)|(?u:\\*))").unwrap(),
                                   __regex::Regex::new("^((?u:λ)|(?u:lambda))").unwrap(),
                                   __regex::Regex::new("^((?u:→)|(?u:\\->))").unwrap(),
                                   __regex::Regex::new("^((?u:⇒)|(?u:=>))").unwrap(),
                                   __regex::Regex::new("^(?u:[a-z])(?u:\')*").unwrap()];
            __Matcher {
                text: s,
                consumed: 0,
                regex_set: __regex_set,
                regex_vec: __regex_vec,
            }
        }
    }

    impl<'input> Iterator for __Matcher<'input> {
        type Item = Result<(usize, (usize, &'input str), usize),
               __lalrpop_util::ParseError<usize, (usize, &'input str), ()>>;

        fn next(&mut self) -> Option<Self::Item> {
            let __text = self.text.trim_left();
            let __whitespace = self.text.len() - __text.len();
            let __start_offset = self.consumed + __whitespace;
            if __text.is_empty() {
                self.text = __text;
                self.consumed = __start_offset;
                None
            } else {
                let __matches = self.regex_set.matches(__text);
                if !__matches.matched_any() {
                    Some(Err(__lalrpop_util::ParseError::InvalidToken { location: __start_offset }))
                } else {
                    let mut __longest_match = 0;
                    let mut __index = 0;
                    for __i in 0..29 {
                        if __matches.matched(__i) {
                            let __match = self.regex_vec[__i].find(__text).unwrap();
                            let __len = __match.end();
                            if __len >= __longest_match {
                                __longest_match = __len;
                                __index = __i;
                            }
                        }
                    }
                    let __result = &__text[..__longest_match];
                    let __remaining = &__text[__longest_match..];
                    let __end_offset = __start_offset + __longest_match;
                    self.text = __remaining;
                    self.consumed = __end_offset;
                    Some(Ok((__start_offset, (__index, __result), __end_offset)))
                }
            }
        }
    }
}

#[allow(unused_variables)]
fn __action0<'input>(input: &'input str, (_, __0, _): (usize, Term, usize)) -> Term {
    (__0)
}

#[allow(unused_variables)]
fn __action1<'input>(input: &'input str, (_, __0, _): (usize, Type, usize)) -> Type {
    (__0)
}

#[allow(unused_variables)]
fn __action2<'input>(input: &'input str,
                     (_, t1, _): (usize, Term, usize),
                     (_, _, _): (usize, &'input str, usize),
                     (_, t2, _): (usize, Term, usize))
                     -> Term {
    Term::Sequence(Box::new(t1), Box::new(t2))
}

#[allow(unused_variables)]
fn __action3<'input>(input: &'input str, (_, __0, _): (usize, Term, usize)) -> Term {
    (__0)
}

#[allow(unused_variables)]
fn __action4<'input>(input: &'input str,
                     (_, t1, _): (usize, Term, usize),
                     (_, t2, _): (usize, Term, usize))
                     -> Term {
    Term::App(Box::new(t1), Box::new(t2))
}

#[allow(unused_variables)]
fn __action5<'input>(input: &'input str, (_, __0, _): (usize, Term, usize)) -> Term {
    (__0)
}

#[allow(unused_variables)]
fn __action6<'input>(input: &'input str,
                     (_, _, _): (usize, &'input str, usize),
                     (_, x, _): (usize, String, usize),
                     (_, _, _): (usize, &'input str, usize),
                     (_, ty, _): (usize, Type, usize),
                     (_, _, _): (usize, &'input str, usize),
                     (_, t, _): (usize, Term, usize))
                     -> Term {
    Term::Abs(x, ty, Box::new(t))
}

#[allow(unused_variables)]
fn __action7<'input>(input: &'input str, (_, __0, _): (usize, Term, usize)) -> Term {
    (__0)
}

#[allow(unused_variables)]
fn __action8<'input>(input: &'input str,
                     (_, _, _): (usize, &'input str, usize),
                     (_, t1, _): (usize, Term, usize),
                     (_, _, _): (usize, &'input str, usize),
                     (_, t2, _): (usize, Term, usize),
                     (_, _, _): (usize, &'input str, usize),
                     (_, t3, _): (usize, Term, usize))
                     -> Term {
    Term::If(Box::new(t1), Box::new(t2), Box::new(t3))
}

#[allow(unused_variables)]
fn __action9<'input>(input: &'input str,
                     (_, _, _): (usize, &'input str, usize),
                     (_, t0, _): (usize, Term, usize),
                     (_, _, _): (usize, &'input str, usize),
                     (_, _, _): (usize, &'input str, usize),
                     (_, x1, _): (usize, String, usize),
                     (_, _, _): (usize, &'input str, usize),
                     (_, t1, _): (usize, Term, usize),
                     (_, _, _): (usize, &'input str, usize),
                     (_, _, _): (usize, &'input str, usize),
                     (_, x2, _): (usize, String, usize),
                     (_, _, _): (usize, &'input str, usize),
                     (_, t2, _): (usize, Term, usize))
                     -> Term {
    Term::Case(Box::new(t0), x1, Box::new(t1), x2, Box::new(t2))
}

#[allow(unused_variables)]
fn __action10<'input>(input: &'input str, (_, __0, _): (usize, Term, usize)) -> Term {
    (__0)
}

#[allow(unused_variables)]
fn __action11<'input>(input: &'input str,
                      (_, t, _): (usize, Term, usize),
                      (_, _, _): (usize, &'input str, usize),
                      (_, ty, _): (usize, Type, usize))
                      -> Term {
    Term::Ascribe(Box::new(t), ty)
}

#[allow(unused_variables)]
fn __action12<'input>(input: &'input str, (_, __0, _): (usize, Term, usize)) -> Term {
    (__0)
}

#[allow(unused_variables)]
fn __action13<'input>(input: &'input str,
                      (_, _, _): (usize, &'input str, usize),
                      (_, t, _): (usize, Term, usize),
                      (_, _, _): (usize, &'input str, usize),
                      (_, ts, _): (usize, ::std::vec::Vec<Term>, usize),
                      (_, tn, _): (usize, Term, usize),
                      (_, _, _): (usize, &'input str, usize))
                      -> Term {
    {
        let mut types = vec![t];
        types.extend_from_slice(&ts);
        types.push(tn);

        Term::Tuple(types)
    }
}

#[allow(unused_variables)]
fn __action14<'input>(input: &'input str,
                      (_, _, _): (usize, &'input str, usize),
                      (_, t1, _): (usize, Term, usize),
                      (_, _, _): (usize, &'input str, usize),
                      (_, t2, _): (usize, Term, usize),
                      (_, _, _): (usize, &'input str, usize))
                      -> Term {
    Term::Pair(Box::new(t1), Box::new(t2))
}

#[allow(unused_variables)]
fn __action15<'input>(input: &'input str,
                      (_, t, _): (usize, Term, usize),
                      (_, _, _): (usize, &'input str, usize),
                      (_, i, _): (usize, usize, usize))
                      -> Term {
    Term::Project(Box::new(t), i)
}

#[allow(unused_variables)]
fn __action16<'input>(input: &'input str,
                      (_, _, _): (usize, &'input str, usize),
                      (_, t, _): (usize, Term, usize),
                      (_, _, _): (usize, &'input str, usize),
                      (_, ty, _): (usize, Type, usize))
                      -> Term {
    Term::Inl(Box::new(t), ty)
}

#[allow(unused_variables)]
fn __action17<'input>(input: &'input str,
                      (_, _, _): (usize, &'input str, usize),
                      (_, t, _): (usize, Term, usize),
                      (_, _, _): (usize, &'input str, usize),
                      (_, ty, _): (usize, Type, usize))
                      -> Term {
    Term::Inr(Box::new(t), ty)
}

#[allow(unused_variables)]
fn __action18<'input>(input: &'input str, (_, __0, _): (usize, &'input str, usize)) -> Term {
    Term::True
}

#[allow(unused_variables)]
fn __action19<'input>(input: &'input str, (_, __0, _): (usize, &'input str, usize)) -> Term {
    Term::False
}

#[allow(unused_variables)]
fn __action20<'input>(input: &'input str, (_, __0, _): (usize, &'input str, usize)) -> Term {
    Term::Unit
}

#[allow(unused_variables)]
fn __action21<'input>(input: &'input str, (_, __0, _): (usize, usize, usize)) -> Term {
    Term::Var(__0)
}

#[allow(unused_variables)]
fn __action22<'input>(input: &'input str,
                      (_, _, _): (usize, &'input str, usize),
                      (_, __0, _): (usize, Term, usize),
                      (_, _, _): (usize, &'input str, usize))
                      -> Term {
    (__0)
}

#[allow(unused_variables)]
fn __action23<'input>(input: &'input str,
                      (_, ty1, _): (usize, Type, usize),
                      (_, _, _): (usize, &'input str, usize),
                      (_, ty2, _): (usize, Type, usize))
                      -> Type {
    Type::Sum(Box::new(ty1), Box::new(ty2))
}

#[allow(unused_variables)]
fn __action24<'input>(input: &'input str, (_, __0, _): (usize, Type, usize)) -> Type {
    (__0)
}

#[allow(unused_variables)]
fn __action25<'input>(input: &'input str,
                      (_, ty1, _): (usize, Type, usize),
                      (_, _, _): (usize, &'input str, usize),
                      (_, ty2, _): (usize, Type, usize))
                      -> Type {
    Type::Product(Box::new(ty1), Box::new(ty2))
}

#[allow(unused_variables)]
fn __action26<'input>(input: &'input str, (_, __0, _): (usize, Type, usize)) -> Type {
    (__0)
}

#[allow(unused_variables)]
fn __action27<'input>(input: &'input str,
                      (_, ty1, _): (usize, Type, usize),
                      (_, _, _): (usize, &'input str, usize),
                      (_, ty2, _): (usize, Type, usize))
                      -> Type {
    Type::Arrow(Box::new(ty1), Box::new(ty2))
}

#[allow(unused_variables)]
fn __action28<'input>(input: &'input str, (_, __0, _): (usize, Type, usize)) -> Type {
    (__0)
}

#[allow(unused_variables)]
fn __action29<'input>(input: &'input str,
                      (_, _, _): (usize, &'input str, usize),
                      (_, tys, _): (usize, ::std::vec::Vec<Type>, usize),
                      (_, tyn, _): (usize, Type, usize),
                      (_, _, _): (usize, &'input str, usize))
                      -> Type {
    {
        let mut types = tys;
        types.push(tyn);

        Type::Tuple(types)
    }
}

#[allow(unused_variables)]
fn __action30<'input>(input: &'input str, (_, __0, _): (usize, &'input str, usize)) -> Type {
    Type::Bool
}

#[allow(unused_variables)]
fn __action31<'input>(input: &'input str, (_, __0, _): (usize, &'input str, usize)) -> Type {
    Type::Unit
}

#[allow(unused_variables)]
fn __action32<'input>(input: &'input str,
                      (_, _, _): (usize, &'input str, usize),
                      (_, __0, _): (usize, Type, usize),
                      (_, _, _): (usize, &'input str, usize))
                      -> Type {
    (__0)
}

#[allow(unused_variables)]
fn __action33<'input>(input: &'input str, (_, __0, _): (usize, &'input str, usize)) -> String {
    __0.to_owned()
}

#[allow(unused_variables)]
fn __action34<'input>(input: &'input str, (_, __0, _): (usize, &'input str, usize)) -> usize {
    __0.parse().unwrap()
}

#[allow(unused_variables)]
fn __action35<'input>(input: &'input str,
                      (_, __0, _): (usize, Type, usize))
                      -> ::std::vec::Vec<Type> {
    vec![__0]
}

#[allow(unused_variables)]
fn __action36<'input>(input: &'input str,
                      (_, v, _): (usize, ::std::vec::Vec<Type>, usize),
                      (_, e, _): (usize, Type, usize))
                      -> ::std::vec::Vec<Type> {
    {
        let mut v = v;
        v.push(e);
        v
    }
}

#[allow(unused_variables)]
fn __action37<'input>(input: &'input str,
                      (_, __0, _): (usize, Type, usize),
                      (_, _, _): (usize, &'input str, usize))
                      -> Type {
    (__0)
}

#[allow(unused_variables)]
fn __action38<'input>(input: &'input str,
                      (_, __0, _): (usize, Term, usize))
                      -> ::std::vec::Vec<Term> {
    vec![__0]
}

#[allow(unused_variables)]
fn __action39<'input>(input: &'input str,
                      (_, v, _): (usize, ::std::vec::Vec<Term>, usize),
                      (_, e, _): (usize, Term, usize))
                      -> ::std::vec::Vec<Term> {
    {
        let mut v = v;
        v.push(e);
        v
    }
}

#[allow(unused_variables)]
fn __action40<'input>(input: &'input str,
                      (_, __0, _): (usize, Term, usize),
                      (_, _, _): (usize, &'input str, usize))
                      -> Term {
    (__0)
}

#[allow(unused_variables)]
fn __action41<'input>(input: &'input str,
                      __0: (usize, Term, usize),
                      __1: (usize, &'input str, usize))
                      -> ::std::vec::Vec<Term> {
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action40(input, __0, __1);
    let __temp0 = (__start0, __temp0, __end0);
    __action38(input, __temp0)
}

#[allow(unused_variables)]
fn __action42<'input>(input: &'input str,
                      __0: (usize, ::std::vec::Vec<Term>, usize),
                      __1: (usize, Term, usize),
                      __2: (usize, &'input str, usize))
                      -> ::std::vec::Vec<Term> {
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action40(input, __1, __2);
    let __temp0 = (__start0, __temp0, __end0);
    __action39(input, __0, __temp0)
}

#[allow(unused_variables)]
fn __action43<'input>(input: &'input str,
                      __0: (usize, Type, usize),
                      __1: (usize, &'input str, usize))
                      -> ::std::vec::Vec<Type> {
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action37(input, __0, __1);
    let __temp0 = (__start0, __temp0, __end0);
    __action35(input, __temp0)
}

#[allow(unused_variables)]
fn __action44<'input>(input: &'input str,
                      __0: (usize, ::std::vec::Vec<Type>, usize),
                      __1: (usize, Type, usize),
                      __2: (usize, &'input str, usize))
                      -> ::std::vec::Vec<Type> {
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action37(input, __1, __2);
    let __temp0 = (__start0, __temp0, __end0);
    __action36(input, __0, __temp0)
}

pub trait __ToTriple<'input> {
    type Error;
    fn to_triple(value: Self) -> Result<(usize, (usize, &'input str), usize), Self::Error>;
}

impl<'input> __ToTriple<'input> for (usize, (usize, &'input str), usize) {
    type Error = ();
    fn to_triple(value: Self) -> Result<(usize, (usize, &'input str), usize), ()> {
        Ok(value)
    }
}
impl<'input> __ToTriple<'input> for Result<(usize, (usize, &'input str), usize), ()> {
    type Error = ();
    fn to_triple(value: Self) -> Result<(usize, (usize, &'input str), usize), ()> {
        value
    }
}
